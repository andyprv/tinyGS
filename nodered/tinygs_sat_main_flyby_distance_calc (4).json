[{"id":"e7455f72.1939f","type":"subflow","name":"Sub Timestamp","info":"create Timestamp out of Systime\n\nInput\n\nTriggered by any Message\n\n---\nOutput\n\n * Input message is passed unchanged.\n\n * new Objects add:  \n    * msg.timestamp.ts = YYYY-MM-DD HH:MM.SS\n    * msg.timestamp.YYYY\n    * msg.timestamp.MM\n    * msg.timestamp.DD\n    * msg.timestamp.hh\n    * msg.timestamp.mm\n    * msg.timestamp.ss\n\n\n---\n\n#Todo:\n\n---\n\nDetails:\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\n","in":[{"x":430,"y":90,"wires":[{"id":"89417cc1.a5d33"}]}],"out":[{"x":1140,"y":90,"wires":[{"id":"89417cc1.a5d33","port":0}]}]},{"id":"89417cc1.a5d33","type":"function","z":"e7455f72.1939f","name":"TimeStamp","func":"// https://www.npmjs.com/package/dateformat\n\n\n\n// (1) wandelt timestamp ins ISO Datumformat um\n//msg.timestamp= new Date().toISOString()\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \n\n// check / set leading Zero\nif(month.toString().length == 1) {\n    month = '0'+month;\n}\nif(day.toString().length == 1) {\n    day = '0'+day;\n}   \nif(hour.toString().length == 1) {\n    hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\n    minute = '0'+minute;\n}\nif(second.toString().length == 1) {\n    second = '0'+second;\n} \n\n// convert to String\nyear    = year.toString();\nmonth   = month.toString();\nday     = day.toString();\nhour    = hour.toString();\nminute  = minute.toString();\nsecond  = second.toString();\n\n\n// concat tempVar Timestamp with Format\nvar tp_Timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Windoof Format \nvar tp_TimestampWin = year+'-'+month+'-'+day+'_'+hour+minute+second;\n\n\n// Variante1: wenn z.B. nicht ein vorhandener Payload\n// überschrieben werden soll, sondern um ein\n// Datum ergänzt werden soll.  \n\n// create Object \"timestamp\"\nmsg.timestamp = { \n                    ts    : tp_Timestamp,\n                    tswin : tp_TimestampWin,\n                \n                    // additional Outputs:\n                    YYYY  : year,\n                    MM    : month,\n                    DD    : day,\n                    hh    : hour,\n                    mm    : minute,\n                    ss    : second\n                };\n                    \n// single Message                    \n//msg.timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Variante 2: Function gibt die aktuelle Zeit als payload aus\n//msg.payload = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","outputs":"1","noerr":0,"x":770,"y":90,"wires":[[]]},{"id":"f8ee140e.258a98","type":"comment","z":"e7455f72.1939f","name":" YYYY-MM-DD HH:MM.SS","info":"","x":1000,"y":40,"wires":[]},{"id":"53889699.701908","type":"tab","label":"Sat - Map","disabled":false,"info":""},{"id":"566d4ba9.3943d4","type":"debug","z":"53889699.701908","name":"Sat Debug; TLE from global","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1160,"y":460,"wires":[]},{"id":"16bc1f1c.fed391","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1140,"y":540,"wires":[[]]},{"id":"a1e0e91f.905808","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1040,"y":1580,"wires":[]},{"id":"89ba85e4.dc4378","type":"inject","z":"53889699.701908","name":"3h","props":[{"p":"payload"}],"repeat":"10800","crontab":"","once":true,"onceDelay":"5","topic":"","payload":"","payloadType":"date","x":110,"y":620,"wires":[["6ea7aec1.39854","f815cce1.b405f","1069205d.a1865"]]},{"id":"710ea20e.9c4a1c","type":"link out","z":"53889699.701908","name":"Sat Map >> ","links":["6e2dae5.be03c5"],"x":670,"y":1160,"wires":[],"l":true},{"id":"808961ff.232e7","type":"worldmap","z":"53889699.701908","name":"","lat":"48.78","lon":"11.53","zoom":"","layer":"Esri Dark Grey","cluster":"","maxage":"","usermenu":"show","panit":"false","hiderightclick":"false","coords":"none","path":"","x":990,"y":1800,"wires":[]},{"id":"d7342b29.7520c8","type":"comment","z":"53889699.701908","name":"lat  48.78 / lon 11.53 / alt 433","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\nToDo:\n\nno path prediction  during flyby ONGOING\nglobal state from gs !\n\ntrafic store trigger \nblöde idee  ts ist dann verarltet \n\nretrigger if  pass and next eta > 5000ms\n\ncolor  from prediction !!\n\nschow colors button \n\npopup autoclose on update - noop \n\n\n","x":660,"y":100,"wires":[]},{"id":"263a1cc4.b8bec4","type":"timearray","z":"53889699.701908","plus":"5","minus":"5","samples":"40","name":"actual path","x":430,"y":1120,"wires":[["710ea20e.9c4a1c","981248b0.c7ee38"]]},{"id":"dabc8ca0.3a3d4","type":"function","z":"53889699.701908","name":"mapPIn (Sat)","func":"\n// remove -20 from name \n// var sname = msg.payload[20].name.split(\"-\");\nvar pname  = msg.satid;\n\n// howTo: cal distance\n// https://www.kompf.de/gps/distcalc.html\n\n// colors by name \n//https://www.w3schools.com/colors/color_tryit.asp?color=Yellow\n\n// external Icons\n//pic_iss = \"https://img1.gratispng.com/20180528/bxi/kisspng-international-space-station-sts-118-space-explorat-astonaut-5b0c270b2ad1a3.8779669615275230831754.jpg\"\n//pic_dragon = \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQiybH7NCxbz51y5G2suDW-QfSDb4q-7RwshA&usqp=CAU\"\n\n// iss\n// https://cdn.pixabay.com/photo/2014/03/25/15/25/international-space-station-296780_960_720.png\n// build in\nvar pic_iss = \"iss\";\n\n// local nginx Icons\n//pic_iss = \"http://192.168.0.17/iss_gn.png\"\n\nvar pic_dragon_wh = \"http://192.168.0.17/dragon_wh.png\";\nvar pic_dragon_ye = \"http://192.168.0.17/dragon_ye.png\";\nvar pic_dragon_gn = \"http://192.168.0.17/dragon_gn.png\";\n//pic_dragon = \"http://192.168.0.17/dragon_xx.png\"      // dyn. split ...\npic_dragon = \"http://192.168.0.17/dragon_wh.png\";\n\n\n// https://www.delftstack.com/de/howto/javascript/javascript-convert-timestamp-to-date/\n// eta \n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// get global settings for Sat flow from global object\nvar gss = global.get('gSat_settings')\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\nvar gSat  = gTLEs[pname]\n\n// default Icon color\nvar sat_color  = \"white\";\nvar spot_color = \"#aaaa00\";\n// yellow \n\n// calculate inRange, actual Position\nlet a =  gss.d_path_lat;\nlet b =  gss.d_path_lon;\n\nlet lat1 = gs.lat;\nlet lon1 = gs.lon;\n\n// howTo: cal distance\n// https://www.kompf.de/gps/distcalc.html\n\n// 1° = π/180 rad ≈ 0.01745\nlet lat_rad = (lat1 + lat) / 2 * 0.01745\nlet dx = 111.3 * Math.cos(lat_rad) * (lon1 - lon);\nlet dy = 111.3 * (lat1 - lat);\nlet distance = Math.sqrt(dx * dx + dy * dy);\n\n// initial calc / settings Done \nif ( !gss.initDone )\n{ \n    // ...\n    gss.initDone = true;     // initial calc / settings Done \n}\n\n\n/*\ndistance = sqrt(dx * dx + dy * dy)\n\nmit distance: Entfernung in km \ndx = 111.3 * cos(lat) * (lon1 - lon2)\nlat = (lat1 + lat2) / 2 * 0.01745\ndy = 111.3 * (lat1 - lat2)\nlat1, lat2, lon1, lon2: Breite, Länge in Grad\n*/\n\n// distanz by simple lon / lat range\n//var lat_inRange = inRange(lat, (gs.lat -a), (gs.lat +a))\n//var lon_inRange = inRange(lon, (gs.lon -b), (gs.lon +b))\n\n// by calculated  distance\nvar lat_inRange = true;\nvar lon_inRange = (distance < (gss.r_mapSpot / 1000))\n// m to km !\n\n\nif ( lat_inRange && lon_inRange )\n{   sat_color  = \"green\"; \n    spot_color = \"green\";\n    \n    /*\n    edge of now\n    store the edge values when Sat in Range \n    by given distance Radius\n    for pre determing the rough dValues\n    on later path fly-over predictions\n    */\n    if (gSat.eta != \"now\") \n    {\n        gSat.edge_lon = lon;\n        gSat.edge_lat = lat;\n    }\n    \n    // delete pass + eta\n    gSat.eta    =  \"now\";\n    gSat.p_pass =  \"\";\n    \n    // store TLE*s to global object\n    global.set('TLEs',gTLEs)\n\n}\n// predicted eta of first contact  \nelse if(gSat.eta !=\"\" && gSat.eta != \"now\" )\n{   sat_color  = \"yellow\";\n    spot_color = \"\";\n}\nelse\n{   sat_color  = \"white\";   // white\n    spot_color = \"\";        //\"\"\n    \n    if(gSat.eta == \"now\" )      // contact ..lost  \n    {\n        gSat.eta     =  \"\";     // clear eta\n        gSat.eta_utc =   0;     // clear eta\n        \n        // store TLE*s to global object\n        global.set('TLEs',gTLEs)\n    }\n    \n}\n\n\n// update global TLE object\ngSat.lat = lat;\ngSat.lon = lon;\ngSat.alt = (msg.payload[20].position.alt / 1000).toFixed(3).toString() + \" km\";\ngSat.dgs = distance.toFixed(3) + \" km \"; // distance to groundstation\n\n// calculate differenz to ISS\ngSat.ISS_d_lat = 0;\ngSat.ISS_d_lon = 0;\n\n\n// set satIconAlias - different map icon \n// for ISS / Dragon \n// from local http Server ...\nlet sIconAlias;\nlet sLabel;\nlet sLayer;\n\n// calculate differenz to ISS\nvar ISS_lat = context.get('ISS_lat')||0;\nvar ISS_lon = context.get('ISS_lon')||0;\nvar diss;\n\n// Icon Toggle bit\nvar cISS_toggle = context.get('cISS_toggle')||0;\n\n// Sorting \nvar cISS_sort = flow.get('cISS_sort')||0;\nvar cDRG_sort = flow.get('cDRG_sort')||0;\n \n\nswitch(pname) {\n  case \"ISS (ZARYA)\":\n    sIconAlias = pic_iss;\n    \n    sLabel = false;\n    sLayer = \"s-\"+pname;\n    \n    ISS_lat = lat;\n    ISS_lon = lon;\n    \n    // store the value back\n    context.set('ISS_lat',ISS_lat);\n    context.set('ISS_lon',ISS_lon);\n    \n    // exit on first run \n    // sorting s-xxxx at end of map Menue ...\n    if ( cISS_sort<2)\n    {   ++cISS_sort;\n        flow.set('cISS_sort',cISS_sort);\n        return null; \n    }\n    \n    break;\n\n  case \"CREW DRAGON 2\":\n      \n    sLabel = false;\n    sLayer = \"s-\"+pname;\n\n    // exit on first run \n    // sorting s-xxxx at end of map Menue ...\n    if ( cDRG_sort<2)\n    {   ++cDRG_sort;\n        flow.set('cDRG_sort',cDRG_sort);\n        return null; \n    }\n    \n    // toggle Icon\n    //sIconAlias = pic_dragon;\n    \n\n    switch(sat_color){\n        case \"green\":\n            sIconAlias = pic_dragon_gn;\n            break;\n        \n        case \"yellow\":\n            sIconAlias = pic_dragon_ye;\n            break;\n        \n        default:\n            sIconAlias = pic_dragon_wh;\n    }\n\n/*\n    cISS_toggle = !cISS_toggle;\n    context.set('cISS_toggle',cISS_toggle);\n\n    if (gSat.ISS_toggle && cISS_toggle){\n        sIconAlias = \"\";\n    }\n*/\n\n    // howTo: cal distance\n    // https://www.kompf.de/gps/distcalc.html\n    \n    lat1 = ISS_lat;     // ISS position\n    lon1 = ISS_lon;\n    \n    // distance to ISS\n    let lat_rad = (lat1 + lat) / 2 * 0.01745\n    let dx = 111.3 * Math.cos(lat_rad) * (lon1 - lon);\n    let dy = 111.3 * (lat1 - lat);\n    diss = Math.sqrt(dx * dx + dy * dy).toFixed(3) +\" km\";\n    gSat.diss = diss;\n\n    // calculate differenz to ISS\n    //lat, (gs.lat -a), (gs.lat +a))\n    \n    gSat.ISS_d_lat = (ISS_lat - lat);\n    gSat.ISS_d_lon = (ISS_lon - lon);\n    \n    // ISS in Range ?\n    var ISS_lat_iR = inRange(lat, (ISS_lat -0.01), (ISS_lat +0.01))\n    var ISS_lon_iR = inRange(lon, (ISS_lon -0.01), (ISS_lon +0.01))\n\n    gSat.ISS_lat_iR = ISS_lat_iR;\n    gSat.ISS_lon_iR = ISS_lon_iR;\n    \n    gSat.diss = 123456;     // distance to ISS\n    \n    \n    gSat.ISS_toggle = ISS_lat_iR && ISS_lon_iR;  // toggle Icon if docked\n\n    break;\n\n  default:\n    sIconAlias = \"satellite\";\n    sLabel = true;\n    sLayer = \"satellites\";\n}\n\n\n\n\n\n/*\naaa: inRange(5, 1, 10),\nbbb: inRange(-5, 1, 10),\nccc: inRange(20, 1, 10)\n*/\n\nvar mapPin = {\n    popped: gSat.popped,    // less flickeering when on top ??\n    \n    name: gSat.satidAlias,\n    fullname: pname,\n    label: sLabel,\n    layer: sLayer,\n    lat: lat,\n    lon: lon,\n    level: (msg.payload[20].position.alt / 1000).toFixed(3).toString() + \" km \",\n    // alt is a keywords .. NaN, no string possible ! \n    //alt: + toString(msg.payload[20].position.alt / 1000) + \" km \",\n\n    distance__gs: gSat.dgs,      // distance to .. in km \n    distance_ISS: diss,\n    \n    //ISS_d_lat: gSat.ISS_d_lat,\n    //ISS_d_lon: gSat.ISS_d_lon,\n    \n    eta: gSat.eta,\n    impact: gSat.d_eta,\n    \n//    tooltip: gSat.tooltip,    // override by label !\n//    tooltip: \"tooltip.......\",\n    \n    iconColor: sat_color,\n    icon: sIconAlias,\n}\n\n// The radius property is specified in meters.\nvar mapspotCircle = {\n    name: pname +\"_spotCircle\",\n    layer: \"spot-circle\",\n    lat: lat,\n    lon: lon,\n    radius: gss.r_mapSpot,  // from global settings \n    fillOpacity: 0.1,\n    fillColor: spot_color,\n    color: spot_color\n}\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\")\n{\n    // push Pin to map\n    msg.payload = mapPin;\n    node.send(msg);\n    \n    // push spotCircle to map\n    msg.payload = mapspotCircle;\n    node.send(msg);\n}\n\n\n\n\n\n\n\n/*\n------------------------------------\n\n// object\n{\n  \"name\": \"Flexible Experimental Embedded Satellite-0\",\n  \"timestamp\": 1619204201542,\n  \"position\": {\n    \"x\": 4863168.36639839,\n    \"y\": 2116263.7008535494,\n    \"z\": -4480738.832871702,\n    \"lat\": -40.3664641843842,\n    \"lon\": -112.6933102329231,\n    \"alt\": 573846.6987718521\n  },\n  \"velocity\": {\n    \"x\": 4926.299158348896,\n    \"y\": 722.1741646985236,\n    \"z\": 5697.355243624375\n  }\n}\n\n\n\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":650,"y":1880,"wires":[["808961ff.232e7","be05d7f3.d43c28","c312a42b.2ee018"]]},{"id":"d4c4fd4b.b3767","type":"function","z":"53889699.701908","name":" path waypoints","func":"// !! Setup in use !!\n\nvar points = msg.payload;\n//var pname  = msg.payload[0].name;\nvar pname  = msg.satid;\n\n// https://www.w3schools.com/colors/colors_picker.asp\n// color array\nconst background=['#477AC2','#33ccff','#FCE206','#FDA50F',\n                  '#800000','#FF00FF','#B284BE','#4682B4'] ;\n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get global settings for Sat flow from global object\nvar gss = global.get('gSat_settings')\n\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\nvar gSat  = gTLEs[pname]\n\n// Debug\n//msg.debug = {\"gSat\": gSat , \"gTLEs\": gTLEs , \"gSat.alt\": gSat.alt};\n//msg.debug = {\"gSat\": gSat , \"gTLEs\": gTLEs};\n//node.send(msg);\n\n\n// default\nvar sat_color  = \"white\";\nvar spot_color = \"\";\n\nvar calwp  = 0;     // waypoint roughly in Range\nvar calwpd = 0;     // calculated waypoint with distance calc\n\n\n// predicted path ....\nvar predictedPath = {\n    name: 'predicted_path_'+ pname,\n    layer: \"path lines\",\n    color: sat_color,\n    weight: \"1\",\n//    dashArray: \"20 10\",\n    line: []\n};\n\n\n// starting point of path prediction with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    i = 21;\n    gss.trg5s = true;     // 5s Trigger activ (no path prediction)  \n}else\n{\n    i = 0;\n    \n    // set eta to undefined \n    var eta;\n    var eta_utc = 0;\n\n// flow tag without spaces !!\n// trim() only removes  head+tail spaces\n\n    var tpname = pname.replace(/\\s+/g, '');\n    flow.set(tpname,eta);\n\n    gss.trg5s = false;  // 5s Trigger inactiv ( path prediction )  \n    \n    // delete pass + eta\n    gSat.eta    =  \"\";\n    gSat.eta_utc=  0;\n    gSat.p_pass =  \"\";\n    \n}\n\n \nfor (var i ; i < points.length; i++) {\n    // [[lat, lon], [lat, lon]]\n    predictedPath.line.push([points[i].position.lat, points[i].position.lon])\n\n    // push only with \"90m\" Trigger\n    if (msg.trigger == \"90m\" )\n    {\n        // actual Pos Point \n        lat= msg.payload[i].position.lat;\n        lon= msg.payload[i].position.lon;\n    \n        // calculate inRange, actual Position\n        let a =  gss.d_path_lat;\n        let b =  gss.d_path_lon;\n        \n        let lat1 = gs.lat;      // groundstation\n        let lon1 = gs.lon;\n        \n    \n        // calculate inRange, waypoint\n        var lat_inRange = inRange(points[i].position.lat, (gs.lat -a), (gs.lat +a))\n        var lon_inRange = inRange(points[i].position.lon, (gs.lon -b), (gs.lon +b))\n    \n        // only calculate real distance if waypoint is possibly in Range !\n        if ( lat_inRange && lon_inRange && !eta )\n        {\n            // howTo: cal distance\n            // https://www.kompf.de/gps/distcalc.html\n            // 1° = π/180 rad ≈ 0.01745\n            let lat_rad = (lat1 + lat) / 2 * 0.01745\n            let dx = 111.3 * Math.cos(lat_rad) * (lon1 - lon);\n            let dy = 111.3 * (lat1 - lat);\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            \n            ++calwp;\n            \n        if ( distance <  gss.r_mapSpot / 1000)  // m to km !\n            {\n                sat_color  = \"yellow\"; \n                spot_color = \"yellow\";\n            \n                predictedPath.color = sat_color;\n                \n                ++calwpd;\n                \n                //var timestamp = 1607110465663\n                eta_utc = points[i].timestamp;\n            \n                var ms = eta_utc // 1575909015000\n                var dateObject = new Date(ms)\n                eta = dateObject.toLocaleString(\"de-DE\") //2019-12-9 10:30:15\n                \n                tpname = pname.replace(/\\s+/g, '');\n                flow.set(tpname,eta);                   // trimed var - unexpected ' ' error\n            \n                // store pass + eta\n                // predicted first contact\n                gSat.eta        =  eta;\n                gSat.eta_utc    =  eta_utc;\n                gSat.p_pass     =  pname;\n            \n            } // end of distance in SpotRange\n            \n        } // end of lon / lat in Range\n        \n        // store waypoint calc counter\n        gSat.calwp      = calwp;\n        gSat.calcwpp    = calwpd;\n        \n    } // end of 90m Trigger\n    \n} // end for\n\n// store TLE*s to global object\nglobal.set('TLEs',gTLEs)\n\n\n// -------------------------------------------\n// starting point of path prediction with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    // past path ....\n    var pastPath = {\n        name: 'past_path_' + pname,\n        layer: \"path lines\",\n        color: sat_color,\n        dashArray: \"20 10\",\n        weight: \"1\",\n        line: []\n    };\n    \n    for (var x = 0; x < (points.length-21); x++) {\n        // [[lat, lon], [lat, lon]]\n        pastPath.line.push([points[x].position.lat, points[x].position.lon])\n    }\n}\n\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    // push path point to map\n    msg.payload = pastPath;\n    node.send(msg);\n    \n    msg.payload = predictedPath;\n    node.send(msg);\n}else\n{\n    // only predictedPath !\n    msg.payload = predictedPath;\n    node.send(msg);\n}\n\n\n\n//return msg;\n\n\n\n\n/*\n------------------------------------\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\n// groundstation\nvar gs = {\n    name: \"ETSI_433N\",\n    lat: 48.78,\n    lon: 11.53,\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n\n// !! Setup in use !!\n\n","finalize":"","x":660,"y":1920,"wires":[["808961ff.232e7","ebe4a531.edb198"]]},{"id":"507bb0bc.b711","type":"link in","z":"53889699.701908","name":"local: TLE ","links":["52bed50c.8b8b7c","53ad7c4c.02f314"],"x":275,"y":1920,"wires":[["ed38556c.60d198","294eb7fc.3ae308"]]},{"id":"5c10e05d.83b85","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1000,"y":2100,"wires":[]},{"id":"c4d5f4c8.747968","type":"comment","z":"53889699.701908","name":"{20] - centerpont of path array","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":200,"y":1860,"wires":[]},{"id":"52bed50c.8b8b7c","type":"link out","z":"53889699.701908","name":"local: TLE ","links":["507bb0bc.b711"],"x":1015,"y":1100,"wires":[]},{"id":"e56d565a.98d338","type":"function","z":"53889699.701908","name":"mapPin ( gs )","func":"// get groundstation from global object\nvar gs = global.get('gs')\n\nvar mapPin = {\n    name:   gs.name,\n    layer:  \"groundstations\",\n    label:  true,\n    info:   gs.info,\n    lat:    gs.lat,\n    lon:    gs.lon,\n    level:  gs.alt + \" m \",\n//    alt: 0.433,\n    freq:   gs.freq,\n    iconColor: \"white\",\n    icon:   \"fa-home\"\n//    icon:   \"https://img.icons8.com/pastel-glyph/2x/search--v1.png\"\n    \n}\n\nmsg.payload = mapPin;\nreturn msg;\n\n\n\n/*\n----------------------------\nhttps://img.icons8.com/pastel-glyph/2x/search--v1.png\n\n*/","outputs":1,"noerr":0,"initialize":"","finalize":"","x":650,"y":2020,"wires":[["808961ff.232e7"]]},{"id":"1c0dacd9.77aa63","type":"comment","z":"53889699.701908","name":"groundstation","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":150,"y":2020,"wires":[]},{"id":"e77d0241.254b5","type":"comment","z":"53889699.701908","name":"https://flows.nodered.org/node/node-red-contrib-web-worldmap","info":"","x":1110,"y":1880,"wires":[]},{"id":"1069205d.a1865","type":"http request","z":"53889699.701908","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://api.tinygs.com/v1/tles.txt","tls":"","persist":false,"proxy":"","authType":"","x":310,"y":620,"wires":[["be267d0.9b0f08"]]},{"id":"57076a71.b53754","type":"inject","z":"53889699.701908","name":"5s","props":[{"p":"payload"},{"p":"lTrigger","v":"5","vt":"num"}],"repeat":"5","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":450,"y":1820,"wires":[["ab8c6dff.94736","713a1254.f9370c"]]},{"id":"be05d7f3.d43c28","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":960,"y":1980,"wires":[[]]},{"id":"57a143f3.faa98c","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":1960,"wires":[[]]},{"id":"98330998.78e238","type":"inject","z":"53889699.701908","name":"5s","props":[{"p":"payload"},{"p":"trigger","v":"5s","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":130,"y":921,"wires":[["5e9b8164.28097"]]},{"id":"5521984d.c1af48","type":"template","z":"53889699.701908","name":"TLE - text","field":"payload","fieldType":"msg","format":"handlebars","syntax":"plain","template":"Norby\n1 46494U 20068J   21114.93346971  .00000311  00000-0  27252-4 0  9991\n2 46494  97.6907  52.7999 0016255 261.9216  98.0154 15.03563646 31295\nVR3X-A Littlefoot\n1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\n2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\nVR3X-B Petrie\n1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\n2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\nVR3X-C Cera\n1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\n2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\nSatish Dhawan Satellite\n1 47721U 21015W   21114.65949170 -.00000070  00000-0  00000-0 0  9998\n2 47721  97.4633 189.4699 0013231  88.3188 271.9790 15.20630677  8401\nSri Shakthi Sat (UNITYsat 3)\n1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\n2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\nFlexible Experimental Embedded Satellite\n1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\n2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235\nLACUNASAT-3\n1 46492U 20068G   21114.77364453  .00001943  00000-0  14535-3 0  9997\n2 46492  97.6887  52.7003 0017581 257.0429 102.8845 15.03847907 31275\nLACUNASAT-2B\n1 47948U 21022S   21114.80210568  .00002062  00000-0  14488-3 0  9996\n2 47948  97.5675  18.0673 0022148 128.9192 231.4014 15.06035895  4851\nCREW DRAGON 2\n1 48209U 21030A   21117.32846381  .00003186  00000-0  66065-4 0  9991\n2 48209  51.6435 234.2812 0002581 282.4115 175.0836 15.48951248280715\nISS (ZARYA)\n1 25544U 98067A   21118.49005350  .00003359  00000-0  69186-4 0  9993\n2 25544  51.6439 228.5355 0002589 288.3616 170.7144 15.48960677280892","output":"str","x":360,"y":340,"wires":[["be267d0.9b0f08"]]},{"id":"ed38556c.60d198","type":"delay","z":"53889699.701908","name":"","pauseType":"rate","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":430,"y":2020,"wires":[["e56d565a.98d338","9067b5b7.205688"]]},{"id":"294eb7fc.3ae308","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":410,"y":1920,"wires":[["57a143f3.faa98c","d4c4fd4b.b3767","dabc8ca0.3a3d4"]]},{"id":"a479e3ab.b2991","type":"timearray","z":"53889699.701908","plus":"360","minus":"","samples":"3600","name":"predict path","x":430,"y":1160,"wires":[["710ea20e.9c4a1c","d6d53ed0.9b21e"]]},{"id":"9b69ae70.19c89","type":"switch","z":"53889699.701908","name":"trigger","property":"trigger","propertyType":"msg","rules":[{"t":"eq","v":"5s","vt":"str"},{"t":"eq","v":"90m","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":270,"y":1140,"wires":[["263a1cc4.b8bec4"],["a479e3ab.b2991"]]},{"id":"4d96e8f3.17b0b8","type":"inject","z":"53889699.701908","name":"90m","props":[{"p":"payload"},{"p":"trigger","v":"90m","vt":"str"},{"p":"traffic","v":"hold","vt":"str"}],"repeat":"1800","crontab":"","once":true,"onceDelay":"6","topic":"","payload":"","payloadType":"date","x":130,"y":780,"wires":[["2f038c9a.343594"]]},{"id":"de5586b9.83b838","type":"timeout","z":"53889699.701908","name":"My Timeout","outtopic":"","outsafe":"hold","outwarning":"Warning","outunsafe":"release","warning":"5","timer":"20","repeat":false,"again":false,"x":350,"y":841,"wires":[["e2976ca5.58bd1"]]},{"id":"5e9b8164.28097","type":"traffic","z":"53889699.701908","name":"block 5s trigger ,to show predictiv path","property_allow":"traffic","filter_allow":"^release","ignore_case_allow":true,"negate_allow":false,"send_allow":false,"property_stop":"traffic","filter_stop":"^hold","ignore_case_stop":true,"negate_stop":false,"send_stop":false,"default_start":true,"differ":false,"x":550,"y":921,"wires":[["bbe55d33.6f048"]]},{"id":"e2976ca5.58bd1","type":"change","z":"53889699.701908","name":"traffic - control","rules":[{"t":"set","p":"traffic","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":560,"y":841,"wires":[["5e9b8164.28097"]]},{"id":"4aec0e43.92d7e","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1080,"y":1040,"wires":[[]]},{"id":"981248b0.c7ee38","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":660,"y":1040,"wires":[[]]},{"id":"48847f58.e6f5d","type":"function","z":"53889699.701908","name":"store tle into globals","func":"//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\n// split payload ... for deap inspection ...\nvar newS2 = msg.satid.split(\" \");\nvar newS3 = msg.tle1.split(\" \");\nvar newS4 = msg.tle2.split(\" \");\n\n// Debug\n/*\nmsg.newS2_0 = newS2[0];   // \"Norby\"\nmsg.newS3_0 = newS3[0];   // \"1\"\nmsg.newS4_0 = newS4[0];   // \"2\"\n*/\n\n// check field.splits starting with valid char \nif  (   (newS2[0] !== \"1\" && newS2[0] !== \"2\") &&\n        (newS3[0]  == \"1\" && newS4[0]  == \"2\")\n    )\n    {\n        // original count function ....\n        var count = context.get('count')||0;\n        count += 1;\n        // store the value back\n        context.set('count',count);\n\n        newS1 = msg.satid;\n        \n        // set satidAlias - shorter name \n        let sAlias;\n        switch(msg.satid) {\n          case \"Flexible Experimental Embedded Satellite\":\n            // code block\n            sAlias = \"FEES\";\n            break;\n          default:\n            // code block\n            sAlias = newS1;\n        }\n            \n    // obj exits >> update\n            if (objStore[newS1]) {\n                \n                //deny = objStore[newS1].deny || 0;\n                \n                objStore[newS1].satid = msg.satid;\n                objStore[newS1].tle1 =  msg.tle1;\n                objStore[newS1].tle2 =  msg.tle2;\n                \n                objStore[newS1].satidAlias =  sAlias;\n                \n            }\n            else{  // object new \n        \n    // create new object to store  \n            objStore[newS1] =\n                    {\n                    satid: msg.satid,\n                    tle1:  msg.tle1,\n                    tle2:  msg.tle2,\n                    eta:   \"\",          // local Time -h\n                    alt:   0,\n                    \n                    satidAlias: sAlias,     // shorter name \n                    \n                    eta_utc: 0,         // eta millis\n                    d_eta_utc: 0,       // delta eta in millis\n                    d_eta:  \"\",         // -h delta eta T- 00:00:00 \n                    l_eta: \"\" ,         // list_eta entry \n                    \n                    bcolor: \"\",         // backround / sat color code\n                    popped: false,      // open popup\n                    t_popped: 0,        // time popup\n                    tooltip: msg.satid,\n                    \n                    p_pass: \"\"\n                    \n                    }\n            }\n            \n        //}  // end for\n\n        //store global object\n        global.set('TLEs',objStore);\n        \n        // show status\n        node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n        \n} // end if valid\nelse\n{\n        // show status\n        node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n\n}\n\n\n//return msg;\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n//satidAlias = {};\n\n","finalize":"","x":1180,"y":620,"wires":[[]]},{"id":"be267d0.9b0f08","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","env":[],"x":515,"y":620,"wires":[["161faf77.265671"]],"icon":"node-red/timer.svg","l":false},{"id":"88b6d27.1c8a33","type":"template","z":"53889699.701908","name":"TLE object","field":"TLEs","fieldType":"global","format":"handlebars","syntax":"mustache","template":"{\n  \"ISS (ZARYA)\": {\n    \"satid\": \"ISS (ZARYA)\",\n    \"tle1\": \"1 25544U 98067A   21118.49005350  .00003359  00000-0  69186-4 0  9993\",\n    \"tle2\": \"2 25544  51.6439 228.5355 0002589 288.3616 170.7144 15.48960677280892\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"ISS (ZARYA)\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"ISS (ZARYA)\",\n    \"p_pass\": \"\"\n  },\n  \"CREW DRAGON 2\": {\n    \"satid\": \"CREW DRAGON 2\",\n    \"tle1\": \"1 48209U 21030A   21117.32846381  .00003186  00000-0  66065-4 0  9991\",\n    \"tle2\": \"2 48209  51.6435 234.2812 0002581 282.4115 175.0836 15.48951248280715\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"CREW DRAGON 2\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"CREW DRAGON 2\",\n    \"p_pass\": \"\"\n  },\n  \"Norby\": {\n    \"satid\": \"Norby\",\n    \"tle1\": \"1 46494U 20068J   21117.59548690 -.00000118  00000-0 -40675-5 0  9990\",\n    \"tle2\": \"2 46494  97.6913  55.4447 0016385 252.1773 107.7665 15.03561557 31692\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Norby\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Norby\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-A Littlefoot\": {\n    \"satid\": \"VR3X-A Littlefoot\",\n    \"tle1\": \"1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\",\n    \"tle2\": \"2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-A Littlefoot\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-A Littlefoot\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-B Petrie\": {\n    \"satid\": \"VR3X-B Petrie\",\n    \"tle1\": \"1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\",\n    \"tle2\": \"2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-B Petrie\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-B Petrie\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-C Cera\": {\n    \"satid\": \"VR3X-C Cera\",\n    \"tle1\": \"1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\",\n    \"tle2\": \"2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-C Cera\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-C Cera\",\n    \"p_pass\": \"\"\n  },\n  \"Satish Dhawan Satellite\": {\n    \"satid\": \"Satish Dhawan Satellite\",\n    \"tle1\": \"1 47721U 21015W   21118.01544871 -.00000070  00000-0  00000+0 0  9990\",\n    \"tle2\": \"2 47721  97.4674 192.8013 0013204  76.2357 284.0752 15.20653104  8917\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Satish Dhawan Satellite\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Satish Dhawan Satellite\",\n    \"p_pass\": \"\"\n  },\n  \"Sri Shakthi Sat (UNITYsat 3)\": {\n    \"satid\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"tle1\": \"1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\",\n    \"tle2\": \"2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"p_pass\": \"\"\n  },\n  \"Flexible Experimental Embedded Satellite\": {\n    \"satid\": \"Flexible Experimental Embedded Satellite\",\n    \"tle1\": \"1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\",\n    \"tle2\": \"2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"FEES\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Flexible Experimental Embedded Satellite\",\n    \"p_pass\": \"\"\n  },\n  \"LACUNASAT-3\": {\n    \"satid\": \"LACUNASAT-3\",\n    \"tle1\": \"1 46492U 20068G   21117.50168196  .00001923  00000-0  14385-3 0  9998\",\n    \"tle2\": \"2 46492  97.6894  55.4125 0017572 246.9594 112.9766 15.03858628 31689\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"LACUNASAT-3\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"LACUNASAT-3\",\n    \"p_pass\": \"\"\n  },\n  \"LACUNASAT-2B\": {\n    \"satid\": \"LACUNASAT-2B\",\n    \"tle1\": \"1 47948U 21022S   21118.19059377  .00001870  00000-0  13169-3 0  9992\",\n    \"tle2\": \"2 47948  97.5674  21.3932 0022458 117.8320 242.5186 15.06050984  5365\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"LACUNASAT-2B\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"LACUNASAT-2B\",\n    \"p_pass\": \"\"\n  }\n}","output":"json","x":590,"y":340,"wires":[[]]},{"id":"cfb3e977.326358","type":"function","z":"53889699.701908","name":"get tle from globals","func":"// read TLE from globals ....\n\n// original count function ....\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n\n//get global object\n//var objStore = global.get('TLEs') || {};\nvar objStore = global.get('TLEs');\n\nvar newS1; // objectname inside objStore\n\n// interate through object .....\n// if object exist \nif (objStore){\n    let k;\n    let i = -1; \n    \n    for (k in objStore) {\n    \n        // k - objectname NOT the object !\n        // i - index \n        ++i;\n    \n        msg.satid = objStore[k][\"satid\"];\n        msg.tle1 =  objStore[k][\"tle1\"];\n        msg.tle2 =  objStore[k][\"tle2\"];\n        msg.payload = Date.now();\n        \n        msg.index = i;\n        \n        // Debug\n        //msg.debug = {\"satid\": k , \"idx\": i};\n        \n        node.send(msg);\n    \n    } // end for loop\n\n    // show status\n    node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n\n}\nelse{\n\n    // show status\n    node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , object not exist ... yet...\"});\n    \n}\n\n\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":990,"y":780,"wires":[["f7dbb12d.938a1","eee86634.bdc5b8"]]},{"id":"bbe55d33.6f048","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","x":780,"y":780,"wires":[["cfb3e977.326358"]]},{"id":"62f921ba.68b75","type":"worldmap in","z":"53889699.701908","name":"","path":"/worldmap","events":"all","x":100,"y":2180,"wires":[["3d4e577d.0f6e98"]]},{"id":"6b2fa809.6e2a78","type":"debug","z":"53889699.701908","name":"SAT Debug: worldmap out","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":640,"y":2480,"wires":[]},{"id":"29dbaee1.0430c2","type":"inject","z":"53889699.701908","name":"grid off","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"grid\":{\"showgrid\":false,\"opt\":{\"showLabel\":true,\"dashArray\":[5,5],\"fontColor\":\"#900\"}}}}","payloadType":"json","x":390,"y":1580,"wires":[["808961ff.232e7"]]},{"id":"7b415122.3a76d","type":"inject","z":"53889699.701908","name":"grid on","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"grid\":{\"showgrid\":true,\"opt\":{\"showLabel\":true,\"dashArray\":[5,5],\"fontColor\":\"#900\"}}}}","payloadType":"json","x":394,"y":1540,"wires":[["808961ff.232e7"]]},{"id":"93882bdd.590a88","type":"inject","z":"53889699.701908","name":"groundstation - ETSI ","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"{\"name\":\"ETSI_433N\",\"lat\":48.78,\"lon\":11.53,\"alt\":433,\"info\":\"home of the wobber ...\",\"freq\":433,\"eta_utc\":0,\"eta\":\"\",\"l_eta\":\"\",\"d_eta_utc\":0,\"d_eta\":\"\",\"bcolor\":\"\",\"popped\":false,\"t_popped\":0,\"tooltip\":\"\",\"p_pass\":\"\"}","payloadType":"json","x":680,"y":140,"wires":[["d38d7a65.c91658"]]},{"id":"d38d7a65.c91658","type":"change","z":"53889699.701908","name":"set global - gs ","rules":[{"t":"set","p":"gs","pt":"global","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":900,"y":140,"wires":[[]]},{"id":"d245bd14.e6141","type":"comment","z":"53889699.701908","name":"TLE from Server ","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\nDragon 2\nhttps://celestrak.com/satcat/tle.php?CATNR=48209\n\nISS (ZARA)\nhttps://celestrak.com/satcat/tle.php?CATNR=25544\n\nWXTrack\nhttps://www.satsignal.eu/software/wxtrack.htm","x":100,"y":520,"wires":[]},{"id":"6d84be3a.870ad","type":"comment","z":"53889699.701908","name":"Trigger predictiv path","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":140,"y":740,"wires":[]},{"id":"f7da9a7c.f5f078","type":"comment","z":"53889699.701908","name":"Trigger actual path","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":130,"y":881,"wires":[]},{"id":"d6d53ed0.9b21e","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":660,"y":1200,"wires":[[]]},{"id":"1189c712.1701e9","type":"comment","z":"53889699.701908","name":"map control ","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":390,"y":1460,"wires":[]},{"id":"f7dbb12d.938a1","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1220,"y":680,"wires":[[]]},{"id":"eee86634.bdc5b8","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1210,"y":780,"wires":[["9b69ae70.19c89"]]},{"id":"2270c8b8.b668a8","type":"status","z":"53889699.701908","name":"","scope":["808961ff.232e7"],"x":140,"y":2388,"wires":[[]]},{"id":"3d4e577d.0f6e98","type":"switch","z":"53889699.701908","name":"action","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"connected","vt":"str"},{"t":"eq","v":"button","vt":"str"},{"t":"eq","v":"click","vt":"str"}],"checkall":"false","repair":false,"outputs":3,"x":250,"y":2180,"wires":[["e56d565a.98d338","c0b16552.349f68","eec94b84.9b4b88","33a77e58.d40722"],["865d14e5.942b78"],["8ce09471.b6fcc8"]]},{"id":"ebe4a531.edb198","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":960,"y":2040,"wires":[[]]},{"id":"d6f7220e.aaf41","type":"inject","z":"53889699.701908","name":"button","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"button\":{\"name\":\"predict path\",\"icon\":\"fa-star\",\"position\":\"bottomright\"}}}","payloadType":"json","x":390,"y":1720,"wires":[["808961ff.232e7"]]},{"id":"c0b16552.349f68","type":"change","z":"53889699.701908","name":"predict now - button +zoom","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"button\":{\"name\":\"predict path now\",\"icon\":\"fa-compass\",\"position\":\"bottomright\"},\"zoom\":3,\"hiderightclick\":true},\"map\":{\"delete\":[\"UK OS 1919-47\",\"UK OS 1900\"]}}","tot":"json"},{"t":"set","p":"cISS_sort","pt":"flow","to":"0","tot":"num"},{"t":"set","p":"cDRG_sort","pt":"flow","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":440,"y":1680,"wires":[["808961ff.232e7"]]},{"id":"65849eb7.bcab","type":"link out","z":"53889699.701908","name":"local: button","links":["20e7d4a3.5c2d2c"],"x":735,"y":2248,"wires":[]},{"id":"20e7d4a3.5c2d2c","type":"link in","z":"53889699.701908","name":"local: button","links":["65849eb7.bcab"],"x":195,"y":700,"wires":[["f5e402cb.62013"]]},{"id":"a457938b.2aefb","type":"inject","z":"53889699.701908","name":"legend","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"legend\":\"<b>Next flyover</b></br><i style=\\\"background: #477AC2\\\"></i> Norby: -00:05:02<br><i style=\\\"background: #448D40\\\"></i> FEES: -00:33:42<br>\"}}","payloadType":"json","x":390,"y":1500,"wires":[["808961ff.232e7"]]},{"id":"ab8c6dff.94736","type":"function","z":"53889699.701908","name":"Legend - ETA","func":"// !! Setup in use !!\n\n// https://www.delftstack.com/de/howto/javascript/javascript-convert-timestamp-to-date/\n// https://coderrocketfuel.com/article/convert-milliseconds-to-a-date-in-vanilla-javascript\n// eta \n\n// https://www.w3schools.com/colors/colors_picker.asp\n// color array\nconst background=['#477AC2','#33ccff','#FCE206','#FDA50F',\n                  '#800000','#FF00FF','#B284BE','#4682B4'] ;\n\n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n\nfunction msToTime(s) {\n\n  // Pad to 2 or 3 digits, default is 2\n  function pad(n, z) {\n    z = z || 2;\n    return ('00' + n).slice(-z);\n  }\n\n  var ms = s % 1000;\n  s = (s - ms) / 1000;\n  var secs = s % 60;\n  s = (s - secs) / 60;\n  var mins = s % 60;\n  var hrs = (s - mins) / 60;\n\n  //return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n  // no ms \n  return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n}\n\n\n// push Function to global \nglobal.set('msToTime', msToTime)\n\n// get global settings for Sat flow from global object\nvar gss = global.get('gSat_settings')\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\n\n// get eta list from global object\n//var glist_eta = global.get('list_eta') || [];\n// start with empyt list\nvar glist_eta = [];\n\n// start with empyt list\nvar glist_sAlias = [];\n\n// start with empyt list\nvar glist_eta_sort = [];\n\n\n//var timestamp = 1607110465663\n//now = new Date(points[i].timestamp);\nutcNow = Date.now();\n//now = Date();\n\n// loop through all TLE / Satlist ..................\n// -------------------------------------------------\n\n// interate through object .....\n// if object exist \nif (gTLEs){\n    let s;          // object name \n    let i = -1;     // unser define Index ( cause object List has no index )\n    let x =  0;     // unser define Index ( cause object List has no index )\n    \n    for (s in gTLEs) {\n        \n        ++i;    // object index\n        \n        // load Object by name \n        var gSat  = gTLEs[s];\n        \n        //var pname  = gSat.satid;\n        var pname  = gSat.satidAlias;\n    \n    // create alias to name list     \n    //    glist_sAlias.push\n        \n        // DEC popped timer value ... \n        if ( gSat.popped )\n        {\n            if ( gSat.t_popped >= msg.lTrigger )\n            { \n                gSat.t_popped -= msg.lTrigger;\n             \n                if ( gSat.t_popped <= 0 )\n                { \n                gSat.t_popped = 0;\n                gSat.popped   = false;  // auto close Pin popup \n                }\n            }\n        }\n\n\n        // if eta_utc is more then evel  >> calculate diff & add to list     \n        if (gSat.eta_utc > 666 )\n        {\n            // delta eta (countdown to contact -00:00:01)\n            var d_eta_utc = gSat.eta_utc - utcNow;      // in millis !!\n            //d_eta_utc = 8126345767890 - utcNow;   // sim , debug\n            \n            // covert millis to human readable -h\n            let d_eta = msToTime(d_eta_utc)\n            let bcolor = background[x]; // only 8 color in arr !!\n            \n            if (gSat.eta == \"now\") {\n            \n                bcolor     = \"green\";\n                d_eta      = \"ONGOING\";\n            }\n            \n            let arr5 =  \"<br>  <i style=\\\"background: \"+bcolor+\"\\\"></i> \\\n                        ETA: \" +d_eta+ \" - \" +pname+ \" \"\n            \n            // ToDo .. create longer list , but push only first 8 to map\n            //         sort list_eta bevor push ...\n            \n            // store elements into global var \n            gSat.d_eta_utc  = d_eta_utc;\n            gSat.d_eta      = d_eta;\n            gSat.bcolor     = bcolor;\n            gSat.l_eta      = arr5;\n            \n            ++x;        // INC index\n             \n    /*        // add / push entry to list ( max 8 entry ) \n            if (glist_eta.length < 8)\n            {\n                ++x;        // INC index\n                // add push map Element\n                glist_eta.push(gSat.l_eta);\n            }\n    */        \n            var eta_sort = {\n                \"satid\"      : gSat.satid,\n                \"satidAlias\" : gSat.satidAlias,\n                \n                \"d_eta_utc\"  : d_eta_utc,\n                \"d_eta\"      : d_eta,\n                \n                \"bcolor\"     : bcolor,\n                \"l_eta\"      : arr5\n            };\n            \n            glist_eta_sort.push(eta_sort);\n            \n            \n        //  no valid gSat.eta_utc  entry \n        \n        }else{  \n\n            // store elements into global var \n            gSat.d_eta_utc  = 0;\n            gSat.d_eta      = \"\";\n            gSat.bcolor     = \"\";\n            gSat.l_eta      = \"\";\n\n            \n        } // end if eta_utc\n        \n    } // end for\n    \n    // set new eta_list to global object\n    global.set('glist_eta_sort' , glist_eta_sort)\n    \n    \n} // end if \n\n/*\n// https://flaviocopes.com/how-to-sort-array-of-objects-by-property-javascript/\n// sort Objects Numerically\naa = arrayCarObjects.sort((a, b) => (a.topSpeed - b.topSpeed));\n\n// sort Objects Alphabetically\nbb = arrayCarObjects.sort((a, b) => (a.brand > b.brand) ? 1 : -1);\n\nglist_eta_usort =  global.get('glist_eta_sort');\n\nvar aa = typeof(glist_eta_usort);\n\n// Debug\n//msg.debug = {\"gSat\": gSat , \"gTLEs\": gTLEs , \"gSat.alt\": gSat.alt};\nmsg.debug = {\"aa\": aa };\nnode.send(msg);\n\n*/\n\n// sort gsat ASC by d_eta_utc\nglist_eta_sort.sort( (a, b) => (a.d_eta_utc - b.d_eta_utc) );\n\n\n\n// add / push entry to list ( max 8 entry ) \nfor (var x = 0; x < 8 && x < glist_eta_sort.length; x++) {\n\n    // add push map Element\n    glist_eta.push(glist_eta_sort[x].l_eta);\n}\n\n// -------------------------------------------------------------\n\n// join all elemts of array , combine with ' ' ..\nstr_arr5 = glist_eta.join(' ')\n\n// Set / Change Legend Title ..\nvar strLegendTitle = \"next flyby's .... \";\n\n// no flyby`s Title\nif (str_arr5.length == 0)\n{\n    strLegendTitle = \"next time are no flyby's .... \";\n}\n\n// 5s Trigger inactiv ( path prediction )  \nif (!gss.trg5s)\n{strLegendTitle += \" calculating ...\"; }\n\n\n// mapLegend object ( dynamic filled with push ...)\nvar mapLegend = {\n    command:{\n        legend: \"<b>\" +strLegendTitle+ \"</b> \\\n                \" +str_arr5+ \" \\\n                <br> \\\n                \"\n        }\n}\n\n// Debug\n//node.send(glist_eta_sort);\n\n\n// set new eta_list to global object\n//global.set('list_eta' , glist_eta)\n\n// set new eta_list to global object\nglobal.set('glist_eta' , glist_eta)\n\n\n// set new eta_list to global object\nglobal.set('glist_eta_sort' , glist_eta_sort)\n\n\n\n\n// push Legend to map\nmsg.payload = mapLegend;\nnode.send(msg);\n\n\n\n/*\n------------------------------------\n\n/*\nbackground: #477AC2\nbackground: #448D40\n\n<br> <i style=\\\"background: #477AC2\\\"></i> \\\n                \" +pname+ \":  T- \" +d_eta+ \" \\\n                <br> <i style=\\\"background: #448D40\\\"></i> \\\n                \" +pname+ \":  T- \" +dateObject+ \" \\\n\n\n//var tempTime = moment.duration(d_eta);\n//var dateObject = d_eta.hours() + \":\" + d_eta.minutes();\n\n//var milliseconds = 1000;\n//moment.utc(milliseconds).format('HH:mm');\n\n// Math.trunc\n// level: (msg.payload[20].position.alt / 1000).toFixed(3).toString() + \" km \",\n\n\n// object\n{\n  \"name\": \"Flexible Experimental Embedded Satellite-0\",\n  \"timestamp\": 1619204201542,\n  \"position\": {\n    \"x\": 4863168.36639839,\n    \"y\": 2116263.7008535494,\n    \"z\": -4480738.832871702,\n    \"lat\": -40.3664641843842,\n    \"lon\": -112.6933102329231,\n    \"alt\": 573846.6987718521\n  },\n  \"velocity\": {\n    \"x\": 4926.299158348896,\n    \"y\": 722.1741646985236,\n    \"z\": 5697.355243624375\n  }\n}\n\n\n\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n\n\n// !! Setup in use !!\n\n","finalize":"","x":660,"y":1820,"wires":[["808961ff.232e7","5c10e05d.83b85","4f3f2887.7fbed8"]]},{"id":"4f3f2887.7fbed8","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":960,"y":1920,"wires":[[]]},{"id":"47e033d7.58fc1c","type":"function","z":"53889699.701908","name":"store tle into globals","func":"//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\n// split payload ... for deap inspection ...\nvar newS2 = msg.satid.split(\" \");\nvar newS3 = msg.tle1.split(\" \");\nvar newS4 = msg.tle2.split(\" \");\n\n// Debug\n/*\nmsg.newS2_0 = newS2[0];   // \"Norby\"\nmsg.newS3_0 = newS3[0];   // \"1\"\nmsg.newS4_0 = newS4[0];   // \"2\"\n*/\n\n// check field.splits starting with valid char \nif  (   (newS2[0] !== \"1\" && newS2[0] !== \"2\") &&\n        (newS3[0]  == \"1\" && newS4[0]  == \"2\")\n    )\n    {\n        // original count function ....\n        var count = context.get('count')||0;\n        count += 1;\n        // store the value back\n        context.set('count',count);\n        \n        \n        //for (let i = 0; i < msg.payload.length; i++) {\n            newS1 = msg.satid;\n            \n    // obj exits >> update\n            if (objStore[newS1]) {\n                \n                //deny = objStore[newS1].deny || 0;\n                \n                objStore[newS1].satid = msg.satid;\n                objStore[newS1].tle1 =  msg.tle1;\n                objStore[newS1].tle2 =  msg.tle2;\n                \n            }\n            else{  // object new \n        \n    // create new object to store  \n            objStore[newS1] =\n                    {\n                    satid: msg.satid,\n                    tle1:  msg.tle1,\n                    tle2:  msg.tle2,\n                    eta:   \"\",\n                    alt:   0,\n                    satidAlias: \"\",     // shorter name \n                    d_eta_utc: 0,       // delta eta in millis\n                    d_eta:  \"\",         // -h delta eta T- 00:00:00 \n                    p_pass: \"\"\n                    }\n            }\n            \n        //}  // end for\n\n        //store global object\n        global.set('TLEs',objStore);\n        \n        // show status\n        node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n        \n} // end if valid\nelse\n{\n        // show status\n        node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n\n}\n\n\n//return msg;\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":740,"y":1480,"wires":[[]]},{"id":"2f038c9a.343594","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":330,"y":780,"wires":[["bbe55d33.6f048","de5586b9.83b838"]]},{"id":"f5e402cb.62013","type":"function","z":"53889699.701908","name":"Button Trigger values","func":"var p = msg.payload;\n\n// Trigger values \nmsg.trigger = \"90m\"\nmsg.traffic = \"hold\"\nmsg.payload = Date.now()\n\n// original payload\nmsg.p = p;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":700,"wires":[["2f038c9a.343594"]]},{"id":"f3bf307.4a84cd","type":"link in","z":"53889699.701908","name":"Sat - Sub TLE  OUT >> ","links":["3b2081fd.85309e","848eb8f6.72e138"],"x":840,"y":1100,"wires":[["52bed50c.8b8b7c","4aec0e43.92d7e"]],"l":true},{"id":"b4ccba2a.d34eb8","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":520,"y":1340,"wires":[]},{"id":"713a1254.f9370c","type":"function","z":"53889699.701908","name":"demo sort","func":"\n// Create Objects Array\n\nconst list = [\n  { idx: 1, color: 'white', size: 'XXL' },\n  { idx: 8, color: 'red', size: 'XL' },\n  { idx: 3, color: 'black', size: 'M' }\n]\n\nvar arrayCarObjects = [\n{brand: \"cHonda\",        topSpeed: 45},\n{brand: \"eFord\",         topSpeed: 6},\n{brand: \"bToyota\",       topSpeed: 240},\n{brand: \"dFerrari\",      topSpeed: 1000},\n{brand: \"aChevrolet\",    topSpeed: 120}\n];\n\nvar arraySatObjects = [{\"d_eta_utc\":12568767,\"d_eta\":\"03:29:28\",\"bcolor\":\"#477AC2\",\"l_eta\":\"<br>  <i style=\\\"background: #477AC2\\\"></i>                         ETA: 03:29:28 - VR3X-A Littlefoot \"},{\"d_eta_utc\":12232767,\"d_eta\":\"03:23:52\",\"bcolor\":\"#448D40\",\"l_eta\":\"<br>  <i style=\\\"background: #448D40\\\"></i>                         ETA: 03:23:52 - VR3X-B Petrie \"},{\"d_eta_utc\":11824767,\"d_eta\":\"03:17:04\",\"bcolor\":\"#FCE206\",\"l_eta\":\"<br>  <i style=\\\"background: #FCE206\\\"></i>                         ETA: 03:17:04 - VR3X-C Cera \"},{\"d_eta_utc\":14362768,\"d_eta\":\"03:59:22\",\"bcolor\":\"#FDA50F\",\"l_eta\":\"<br>  <i style=\\\"background: #FDA50F\\\"></i>                         ETA: 03:59:22 - Satish Dhawan Satellite \"},{\"d_eta_utc\":18226768,\"d_eta\":\"05:03:46\",\"bcolor\":\"#800000\",\"l_eta\":\"<br>  <i style=\\\"background: #800000\\\"></i>                         ETA: 05:03:46 - Sri Shakthi Sat (UNITYsat 3) \"}]\n\n\nvar aa = {};\nvar bb = {};\n\n// Sort Objects Numerically\n//aa = arrayCarObjects.sort((a, b) => (a.topSpeed - b.topSpeed));\n\naa = arraySatObjects.sort((a, b) => (a.d_eta_utc - b.d_eta_utc));\n\n// Sort Objects Alphabetically\n//bb = arrayCarObjects.sort((a, b) => (a.brand > b.brand) ? 1 : -1);\n\n\nvar ulist = list;\n\nvar slist = ulist.sort((a, b) => (a.idc - b.idx))\n\nmsg.aa = aa;\nmsg.bb = bb;\n\nmsg.ulist = ulist;\n\nmsg.slist = slist;\n\n\n\n\n\n\n\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":240,"y":1340,"wires":[["b4ccba2a.d34eb8"]]},{"id":"eec94b84.9b4b88","type":"change","z":"53889699.701908","name":"color now - button","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"button\":{\"name\":\"show color now\",\"icon\":\"fa-ellipsis-h\",\"position\":\"bottomright\"}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":410,"y":1640,"wires":[["808961ff.232e7"]]},{"id":"865d14e5.942b78","type":"switch","z":"53889699.701908","name":"button","property":"payload.name","propertyType":"msg","rules":[{"t":"eq","v":"predict path now","vt":"str"},{"t":"eq","v":"show color now","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":450,"y":2248,"wires":[["ba0d657.dd91298"],["8c02dfe6.95496"]]},{"id":"8c02dfe6.95496","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":600,"y":2308,"wires":[[]]},{"id":"33a77e58.d40722","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":540,"y":2160,"wires":[[]]},{"id":"ba0d657.dd91298","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":600,"y":2248,"wires":[["65849eb7.bcab"]]},{"id":"8ce09471.b6fcc8","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":2320,"wires":[["6b2fa809.6e2a78","70bd20d6.899c"]]},{"id":"70bd20d6.899c","type":"function","z":"53889699.701908","name":"update tle into globals","func":"//get global tle`s object\nvar gTLEs = global.get('TLEs') || {};\n\n// get global settings for Sat flow from global object\nvar gss = global.get('gSat_settings')\n\n\n// Sat Alias from map reply !\nvar mName   = msg.payload.name;      // map.object.Name ( Sat alias !)\nvar mAction = msg.payload.action;\n\n//var pname  = \"Norby\";\n\n// loop through all TLE / Satlist ..................\n// -------------------------------------------------\n\n// interate through object .....\n// if object exist \nif (gTLEs){\n    let s;          // object name \n    let i = -1;     // unser define Index ( cause object List has no index )\n    let x =  0;     // unser define Index ( cause object List has no index )\n    \n    for (s in gTLEs) {\n        \n        ++i;    // object index\n        \n        // load Object by name \n        var gSat  = gTLEs[s];\n        \n        var sName  = gSat.satid;\n        var aName  = gSat.satidAlias;\n    \n        // found Alias Name \n        if (mName == aName) {\n            \n            var state = gSat.popped;\n            \n            if (!state){\n            gSat.t_popped = gss.t_popped; \n            }\n            \n            // invert popped status\n            gSat.popped = !state;\n            \n            break;\n            \n        } // end if found Alias\n        \n    } // end for\n    \n} // end if\n\n// Debug\nmsg.sName = sName;\nmsg.aName = aName;\nmsg.mName = mName;\nmsg.state = state;\nreturn{msg};\n\n\n//store global object\n//global.set('TLEs',objStore);\n\n// this  will alter also the global object !!!\n// return(objStore);\n\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n//satidAlias = {};\n\n","finalize":"","x":640,"y":2380,"wires":[["6b2fa809.6e2a78"]]},{"id":"46abef24.e18e9","type":"comment","z":"53889699.701908","name":"global settings","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\nToDo:\n\nno path prediction  during flyby ONGOING\nglobal state from gs !\n\ntrafic store trigger \nblöde idee  ts ist dann verarltet \n\nretrigger if  pass and next eta > 5000ms\n\ncolor  from prediction !!\n\nschow colors button \n\npopup autoclose on update - noop \n\n\n","x":110,"y":100,"wires":[]},{"id":"347573ba.6a704c","type":"inject","z":"53889699.701908","name":"global settings","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":140,"wires":[["7a776a4d.cd6f74"]]},{"id":"8444a2f2.dff43","type":"comment","z":"53889699.701908","name":"TinyGS - Satellite Tracking Map ...........................","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\nDragon 2\nhttps://celestrak.com/satcat/tle.php?CATNR=48209\n\nISS (ZARA)\nhttps://celestrak.com/satcat/tle.php?CATNR=25544\n\nWXTrack\nhttps://www.satsignal.eu/software/wxtrack.htm\n\n\nToDo:\n\nno path prediction  during flyby ONGOING\nglobal state from gs !\n\ntrafic store trigger \nblöde idee  ts ist dann verarltet \n\nretrigger if  pass and next eta > 5000ms\n\ncolor  from prediction !!\n\nshow colors button \n\npopup autoclose on update - noop \n\nexport to list for MQTT\n\n\n","x":200,"y":40,"wires":[]},{"id":"7a776a4d.cd6f74","type":"function","z":"53889699.701908","name":"global settings","func":"// global settings\n\nlet settings = \n{\n    \"t_popped\": 600,        // autoclose popup time in s \n\n    \"r_mapSpot\": 700000,    // mapSpotCircle (Sat covering radius) in Meter \n                            // default 700.000 = 700km Radius \n    \n    // only path points whitin this Range \n    // will do a distance calculation ...\n    // cuts down the >3600 Points to calculate\n    // to < 100 per satellite !\n    \"d_path_lat\": 15,       //  5 / 15 Initial values \n    \"d_path_lon\": 30,       // 15 / 30  -/+ range for flyby \n\n    \"initDone\":  false,     // initial calc / settings Done \n\n    \"p_pass\": \"\"\n};\n    \n//store global object\nglobal.set('gSat_settings',settings);\n\n    \nreturn msg;\n\n\n/*\n___________________________________________\n\n// howTo: cal distance\n// https://www.kompf.de/gps/distcalc.html\n\nvar lat_inRange = inRange(lat, (gs.lat  -5), (gs.lat  +5))\nvar lon_inRange = inRange(lon, (gs.lon -15), (gs.lon +15))\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":420,"y":140,"wires":[[]]},{"id":"57d1da41.9ed454","type":"inject","z":"53889699.701908","name":"force TLE to global","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"0.1","topic":"","payload":"","payloadType":"date","x":150,"y":340,"wires":[["5521984d.c1af48"]]},{"id":"9067b5b7.205688","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":2060,"wires":[[]]},{"id":"161faf77.265671","type":"function","z":"53889699.701908","name":"split / merge TLE set ","func":"\n// split tle text list \nvar spl = msg.payload.split(\"\\n\");\n\n// ckeck split length , must be divider of 3 = 0\n// or modulo of 3\nvar len     = spl.length;\n\n// get head+tail of split payload\nspl0     = spl[0];\nspl1     = spl[1];\nspln     = spl[len-1];\n\n// check for trailing \"\" ...\nif (len > 2 && spln == \"\")\n{\n    spl.splice(-1, 1)   // delete last entry\n    len = spl.length;   // update length\n}\n\nvar lng3    = spl.length / 3;\nvar modulo3 = spl.length % 3;\nvar now     = Date.now();\n\n// prepare empty payload \nvar newMsg = {};\n\n// length is OK ...\nif (len > 2 && modulo3 == 0)\n{\n    \nnewMsg.payload = {};\n\n    for (var x = 0; x < len ; x+=3) {         // step by 3 !\n        \n        // [ satid, tle1, tle2 ]\n        //newMsg.payload = [spl[x], spl[x+1], spl[x+2]]\n        \n        newMsg.satid    = spl[x].trim();\n        newMsg.tle1     = spl[x+1].trim();\n        newMsg.tle2     = spl[x+2].trim();\n        newMsg.payload  = Date.now()\n        \n        newMsg.idx = x;\n        \n        node.send(newMsg);\n    \n    } // end for\n\n    // show status\n    node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , tle pushed: \" + lng3});\n\n\n} // end if\nelse\n{\n    // show status\n    node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n}\n\n\n\n// Debug split , must be divider of 3 = 0\nnewMsg.len     = len;\nnewMsg.lng3    = lng3;\nnewMsg.mdulo3  = modulo3;\n\nnewMsg.spl0     = spl[0];\nnewMsg.spl1     = spl[1];\nnewMsg.spln     = spl[len-1];\n\nnewMsg.mdulo03 =  3 % 3;\nnewMsg.mdulo11 = 11 % 3;\nnewMsg.mdulo12 = 12 % 3;\nnewMsg.mdulo13 = 13 % 3;\n\n\nreturn (newMsg);\n\n/*\n-----------------------------------------\n\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\n*/\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":660,"y":620,"wires":[["23fee945.c24ec6"]]},{"id":"23fee945.c24ec6","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","env":[],"x":815,"y":620,"wires":[["7a9bbf54.413e"]],"icon":"node-red/timer.svg","l":false},{"id":"e95830bd.c0f19","type":"comment","z":"53889699.701908","name":"TLE Startup Template","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":140,"y":300,"wires":[]},{"id":"f815cce1.b405f","type":"http request","z":"53889699.701908","name":"ISS (ZARYA)","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://celestrak.com/satcat/tle.php?CATNR=25544","tls":"","persist":false,"proxy":"","authType":"","x":310,"y":560,"wires":[["be267d0.9b0f08"]]},{"id":"6ea7aec1.39854","type":"http request","z":"53889699.701908","name":"CREW DRAGON 2","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://celestrak.com/satcat/tle.php?CATNR=48209","tls":"","persist":false,"proxy":"","authType":"","x":330,"y":500,"wires":[["be267d0.9b0f08"]]},{"id":"7a9bbf54.413e","type":"switch","z":"53889699.701908","name":"Filter","property":"satid","propertyType":"msg","rules":[{"t":"cont","v":"Satish Dhawan Satellite","vt":"str"},{"t":"cont","v":"aaaaaaaaa","vt":"str"},{"t":"cont","v":"bbbbbbbbbbb","vt":"str"},{"t":"cont","v":"cccccccc","vt":"str"},{"t":"else"}],"checkall":"false","repair":false,"outputs":5,"x":930,"y":560,"wires":[[],[],[],[],["48847f58.e6f5d","16bc1f1c.fed391","566d4ba9.3943d4"]],"outputLabels":["","","","","tracked"]},{"id":"b43a3a51.165e58","type":"comment","z":"53889699.701908","name":"Filter Satelites (TLE) ","info":"worldmap\n\n\n","x":770,"y":500,"wires":[]},{"id":"c312a42b.2ee018","type":"switch","z":"53889699.701908","name":"Filter","property":"satid","propertyType":"msg","rules":[{"t":"cont","v":"ISS","vt":"str"},{"t":"cont","v":"DRAGON","vt":"str"},{"t":"cont","v":"bbbbbbbbbbb","vt":"str"},{"t":"cont","v":"cccccccc","vt":"str"},{"t":"else"}],"checkall":"false","repair":false,"outputs":5,"x":930,"y":1700,"wires":[[],["a1e0e91f.905808"],[],[],[]],"outputLabels":["","","","","tracked"]},{"id":"4ad079e5.209e18","type":"debug","z":"53889699.701908","name":"SAT Debug: http get","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":920,"y":2680,"wires":[]},{"id":"59ff2a1.fa600d4","type":"http in","z":"53889699.701908","name":"","url":"/hello","method":"get","swaggerDoc":"","x":360,"y":2740,"wires":[["54c1e70d.ab3e18"]]},{"id":"54c1e70d.ab3e18","type":"template","z":"53889699.701908","name":"page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<html>\n    <head></head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html>","x":530,"y":2740,"wires":[["2cc975f7.c944da"]]},{"id":"266c286f.d993d8","type":"http response","z":"53889699.701908","name":"","x":870,"y":2740,"wires":[]},{"id":"2a78d406.11782c","type":"comment","z":"53889699.701908","name":"curl -u userid:password  http://localhost:1880/hello ","info":"https://cookbook.nodered.org/http/create-an-http-endpoint\n\ncurl -u userid:password  http://localhost:1880/hello \n\nhttp://192.168.0.17:1880/tinygs.eta\n\nhttp://192.168.0.17:1880/hello\n","x":340,"y":2660,"wires":[]},{"id":"6d43d431.1d527c","type":"http in","z":"53889699.701908","name":"","url":"/tinygs.eta","method":"get","upload":false,"swaggerDoc":"","x":340,"y":2800,"wires":[["b28a7e77.8033e"]]},{"id":"2cc975f7.c944da","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":755,"y":2740,"wires":[["266c286f.d993d8","4ad079e5.209e18"]],"l":false},{"id":"b28a7e77.8033e","type":"template","z":"53889699.701908","name":"tinygs.eta","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n  \"ISS (ZARYA)\": {\n    \"satid\": \"ISS (ZARYA)\",\n    \"tle1\": \"1 25544U 98067A   21118.49005350  .00003359  00000-0  69186-4 0  9993\",\n    \"tle2\": \"2 25544  51.6439 228.5355 0002589 288.3616 170.7144 15.48960677280892\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"ISS (ZARYA)\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"ISS (ZARYA)\",\n    \"p_pass\": \"\"\n  },\n  \"CREW DRAGON 2\": {\n    \"satid\": \"CREW DRAGON 2\",\n    \"tle1\": \"1 48209U 21030A   21117.32846381  .00003186  00000-0  66065-4 0  9991\",\n    \"tle2\": \"2 48209  51.6435 234.2812 0002581 282.4115 175.0836 15.48951248280715\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"CREW DRAGON 2\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"CREW DRAGON 2\",\n    \"p_pass\": \"\"\n  },\n  \"Norby\": {\n    \"satid\": \"Norby\",\n    \"tle1\": \"1 46494U 20068J   21117.59548690 -.00000118  00000-0 -40675-5 0  9990\",\n    \"tle2\": \"2 46494  97.6913  55.4447 0016385 252.1773 107.7665 15.03561557 31692\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Norby\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Norby\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-A Littlefoot\": {\n    \"satid\": \"VR3X-A Littlefoot\",\n    \"tle1\": \"1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\",\n    \"tle2\": \"2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-A Littlefoot\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-A Littlefoot\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-B Petrie\": {\n    \"satid\": \"VR3X-B Petrie\",\n    \"tle1\": \"1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\",\n    \"tle2\": \"2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-B Petrie\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-B Petrie\",\n    \"p_pass\": \"\"\n  },\n  \"VR3X-C Cera\": {\n    \"satid\": \"VR3X-C Cera\",\n    \"tle1\": \"1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\",\n    \"tle2\": \"2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"VR3X-C Cera\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"VR3X-C Cera\",\n    \"p_pass\": \"\"\n  },\n  \"Satish Dhawan Satellite\": {\n    \"satid\": \"Satish Dhawan Satellite\",\n    \"tle1\": \"1 47721U 21015W   21118.01544871 -.00000070  00000-0  00000+0 0  9990\",\n    \"tle2\": \"2 47721  97.4674 192.8013 0013204  76.2357 284.0752 15.20653104  8917\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Satish Dhawan Satellite\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Satish Dhawan Satellite\",\n    \"p_pass\": \"\"\n  },\n  \"Sri Shakthi Sat (UNITYsat 3)\": {\n    \"satid\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"tle1\": \"1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\",\n    \"tle2\": \"2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"p_pass\": \"\"\n  },\n  \"Flexible Experimental Embedded Satellite\": {\n    \"satid\": \"Flexible Experimental Embedded Satellite\",\n    \"tle1\": \"1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\",\n    \"tle2\": \"2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"FEES\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"Flexible Experimental Embedded Satellite\",\n    \"p_pass\": \"\"\n  },\n  \"LACUNASAT-3\": {\n    \"satid\": \"LACUNASAT-3\",\n    \"tle1\": \"1 46492U 20068G   21117.50168196  .00001923  00000-0  14385-3 0  9998\",\n    \"tle2\": \"2 46492  97.6894  55.4125 0017572 246.9594 112.9766 15.03858628 31689\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"LACUNASAT-3\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"LACUNASAT-3\",\n    \"p_pass\": \"\"\n  },\n  \"LACUNASAT-2B\": {\n    \"satid\": \"LACUNASAT-2B\",\n    \"tle1\": \"1 47948U 21022S   21118.19059377  .00001870  00000-0  13169-3 0  9992\",\n    \"tle2\": \"2 47948  97.5674  21.3932 0022458 117.8320 242.5186 15.06050984  5365\",\n    \"eta\": \"\",\n    \"alt\": 0,\n    \"satidAlias\": \"LACUNASAT-2B\",\n    \"eta_utc\": 0,\n    \"d_eta_utc\": 0,\n    \"d_eta\": \"\",\n    \"l_eta\": \"\",\n    \"bcolor\": \"\",\n    \"popped\": false,\n    \"t_popped\": 0,\n    \"tooltip\": \"LACUNASAT-2B\",\n    \"p_pass\": \"\"\n  }\n}","x":540,"y":2800,"wires":[["2cc975f7.c944da"]]}]