[{"id":"e7455f72.1939f","type":"subflow","name":"Sub Timestamp","info":"create Timestamp out of Systime\n\nInput\n\nTriggered by any Message\n\n---\nOutput\n\n * Input message is passed unchanged.\n\n * new Objects add:  \n    * msg.timestamp.ts = YYYY-MM-DD HH:MM.SS\n    * msg.timestamp.YYYY\n    * msg.timestamp.MM\n    * msg.timestamp.DD\n    * msg.timestamp.hh\n    * msg.timestamp.mm\n    * msg.timestamp.ss\n\n\n---\n\n#Todo:\n\n---\n\nDetails:\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\n","in":[{"x":430,"y":90,"wires":[{"id":"89417cc1.a5d33"}]}],"out":[{"x":1140,"y":90,"wires":[{"id":"89417cc1.a5d33","port":0}]}]},{"id":"89417cc1.a5d33","type":"function","z":"e7455f72.1939f","name":"TimeStamp","func":"// https://www.npmjs.com/package/dateformat\n\n\n\n// (1) wandelt timestamp ins ISO Datumformat um\n//msg.timestamp= new Date().toISOString()\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \n\n// check / set leading Zero\nif(month.toString().length == 1) {\n    month = '0'+month;\n}\nif(day.toString().length == 1) {\n    day = '0'+day;\n}   \nif(hour.toString().length == 1) {\n    hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\n    minute = '0'+minute;\n}\nif(second.toString().length == 1) {\n    second = '0'+second;\n} \n\n// convert to String\nyear    = year.toString();\nmonth   = month.toString();\nday     = day.toString();\nhour    = hour.toString();\nminute  = minute.toString();\nsecond  = second.toString();\n\n\n// concat tempVar Timestamp with Format\nvar tp_Timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Windoof Format \nvar tp_TimestampWin = year+'-'+month+'-'+day+'_'+hour+minute+second;\n\n\n// Variante1: wenn z.B. nicht ein vorhandener Payload\n// überschrieben werden soll, sondern um ein\n// Datum ergänzt werden soll.  \n\n// create Object \"timestamp\"\nmsg.timestamp = { \n                    ts    : tp_Timestamp,\n                    tswin : tp_TimestampWin,\n                \n                    // additional Outputs:\n                    YYYY  : year,\n                    MM    : month,\n                    DD    : day,\n                    hh    : hour,\n                    mm    : minute,\n                    ss    : second\n                };\n                    \n// single Message                    \n//msg.timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Variante 2: Function gibt die aktuelle Zeit als payload aus\n//msg.payload = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","outputs":"1","noerr":0,"x":770,"y":90,"wires":[[]]},{"id":"f8ee140e.258a98","type":"comment","z":"e7455f72.1939f","name":" YYYY-MM-DD HH:MM.SS","info":"","x":1000,"y":40,"wires":[]},{"id":"53889699.701908","type":"tab","label":"sat demo 2","disabled":false,"info":""},{"id":"566d4ba9.3943d4","type":"debug","z":"53889699.701908","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":870,"y":340,"wires":[]},{"id":"16bc1f1c.fed391","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":160,"wires":[[]]},{"id":"8be7fffc.68429","type":"http request","z":"53889699.701908","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://celestrak.com/satcat/tle.php?CATNR=46494","tls":"","persist":false,"proxy":"","authType":"","x":290,"y":160,"wires":[["d7436d28.ae88e"]]},{"id":"d7436d28.ae88e","type":"function","z":"53889699.701908","name":"Move the data to the override values","func":"var p = msg.payload.split(\"\\n\");\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;","outputs":1,"noerr":0,"x":550,"y":160,"wires":[["16bc1f1c.fed391"]]},{"id":"a1e0e91f.905808","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1020,"y":1020,"wires":[]},{"id":"89ba85e4.dc4378","type":"inject","z":"53889699.701908","name":"3h","props":[{"p":"payload"}],"repeat":"10800","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":90,"y":360,"wires":[["1069205d.a1865"]]},{"id":"1d19bd5a.960f33","type":"link in","z":"53889699.701908","name":"","links":["53ad7c4c.02f314","710ea20e.9c4a1c"],"x":275,"y":1120,"wires":[["7789f617.c545e8","b0db8227.f919f"]]},{"id":"710ea20e.9c4a1c","type":"link out","z":"53889699.701908","name":"","links":["1d19bd5a.960f33"],"x":955,"y":860,"wires":[]},{"id":"7789f617.c545e8","type":"function","z":"53889699.701908","name":"Extract LatLon","func":"var mapPin = {\n    name: msg.payload.name,\n    lat: msg.payload.position.lat,\n    lon: msg.payload.position.lon,\n    icon: \"satellite\"\n}\nmsg.payload = mapPin;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":680,"y":1080,"wires":[["a1e0e91f.905808","808961ff.232e7"]]},{"id":"b0db8227.f919f","type":"function","z":"53889699.701908","name":"Convert to Path","func":"var points = msg.payload;\nvar path = {\n    name: 'Path',\n    line: []\n};\nfor (var i = 0; i < points.length; i++) {\n    // [[lat, lon], [lat, lon]]\n    path.line.push([points[i].position.lat, points[i].position.lon])\n}\n\nmsg.payload = path;\nreturn msg;","outputs":1,"noerr":0,"x":680,"y":1120,"wires":[["a1e0e91f.905808","808961ff.232e7"]]},{"id":"808961ff.232e7","type":"worldmap","z":"53889699.701908","name":"","lat":"48.78","lon":"11.53","zoom":"","layer":"Esri Dark Grey","cluster":"","maxage":"","usermenu":"show","panit":"false","hiderightclick":"false","coords":"none","path":"","x":970,"y":1120,"wires":[]},{"id":"d7342b29.7520c8","type":"comment","z":"53889699.701908","name":"lat  48.78 / long 11.53","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":180,"y":700,"wires":[]},{"id":"4814811c.efac1","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":420,"wires":[["52bed50c.8b8b7c","4aec0e43.92d7e"]]},{"id":"263a1cc4.b8bec4","type":"timearray","z":"53889699.701908","plus":"5","minus":"5","samples":"40","name":"actual path","x":610,"y":540,"wires":[["67754622.73ca18"]]},{"id":"dabc8ca0.3a3d4","type":"function","z":"53889699.701908","name":"Extract LatLon{20]","func":"\n// remove -20 from name \n//var sname = msg.payload[20].name.split(\"-\");\n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// groundstation\nvar gs = {\n    name: \"ETSI_433N\",\n    lat: 48.78,\n    lon: 11.53,\n}\n\n// default\nvar sat_color  = \"white\";\nvar spot_color = \"#aaaa00\";\n// yellow \n\n// calculate inRange, actual Position\nvar lat_inRange = inRange(lat, (gs.lat  -5), (gs.lat  +5))\nvar lon_inRange = inRange(lon, (gs.lon -15), (gs.lon +15))\n\nif ( lat_inRange && lon_inRange )\n{   sat_color  = \"green\"; \n    spot_color = \"green\";\n}\nelse\n{   sat_color  = \"white\";\n    spot_color = \"\";\n}\n\n\n/*\naaa: inRange(5, 1, 10),\nbbb: inRange(-5, 1, 10),\nccc: inRange(20, 1, 10)\n*/\n\nvar mapPin = {\n//    name: msg.payload[20].name,\n    name: msg.satid,\n    label: true,\n    layer: \"satellites\",\n    lat: msg.payload[20].position.lat,\n    lon: msg.payload[20].position.lon,\n    fillOpacity: 0.1,\n    iconColor: sat_color,\n    icon: \"satellite\",\n}\n\n// The radius property is specified in meters.\n\nvar mapspotCircle = {\n//    name: msg.payload[20].name,\n    name: msg.satid +\"_spotCircle\",\n    layer: \"spot-circle\",\n    lat: msg.payload[20].position.lat,\n    lon: msg.payload[20].position.lon,\n    radius: 700000,\n    fillOpacity: 0.1,\n    fillColor: spot_color,\n    color: spot_color\n}\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\")\n{\n    // push Pin to map\n    msg.payload = mapPin;\n    node.send(msg);\n    \n    // push spotCircle to map\n    msg.payload = mapspotCircle;\n    node.send(msg);\n}\n\n\n/*\n------------------------------------\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":670,"y":1200,"wires":[["808961ff.232e7","5c10e05d.83b85","be05d7f3.d43c28"]]},{"id":"d4c4fd4b.b3767","type":"function","z":"53889699.701908","name":"Convert to Path{20]","func":"var points = msg.payload;\n//var pname  = msg.payload[0].name;\nvar pname  = msg.satid;\n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// groundstation\nvar gs = {\n    name: \"ETSI_433N\",\n    lat: 48.78,\n    lon: 11.53,\n}\n\n// default\nvar sat_color  = \"white\";\nvar spot_color = \"#aaaa00\";\n\nif ( lat > gs.lat &&  lon < gs.lon)\n{   sat_color  = \"white\"; \n    spot_color = \"green\";\n}\nelse\n{   sat_color  = \"white\";\n    spot_color = \"\";\n}\n\n\n\n// predicted path ....\nvar predictedPath = {\n    name: 'predicted_path_'+ pname,\n    layer: \"path lines\",\n    color: sat_color,\n    weight: \"1\",\n//    dashArray: \"20 10\",\n    line: []\n};\n\n\n// starting point of path prediction with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    i = 21;\n}else\n{\n    i = 0;\n}\n\n\nfor (var i ; i < points.length; i++) {\n    // [[lat, lon], [lat, lon]]\n    predictedPath.line.push([points[i].position.lat, points[i].position.lon])\n\n    // push only with \"90m\" Trigger\n    if (msg.trigger == \"90m\" )\n    {\n    // calculate inRange, waypoint\n    var lat_inRange = inRange(points[i].position.lat, (gs.lat  -5), (gs.lat  +5))\n    var lon_inRange = inRange(points[i].position.lon, (gs.lon -15), (gs.lon +15))\n    \n        if ( lat_inRange && lon_inRange )\n        {   sat_color  = \"yellow\"; \n            spot_color = \"yellow\";\n        \n            predictedPath.color = sat_color;\n            \n            //var timestamp = 1607110465663\n            var date = new Date(points[i].timestamp);\n            flow.set(pname,date);\n            \n            predictedPath.color = sat_color;\n            \n        }\n\n    }\n    \n}\n\n// -------------------------------------------\n// past path ....\nvar pastPath = {\n    name: 'past_path_' + pname,\n    layer: \"path lines\",\n    color: sat_color,\n    dashArray: \"20 10\",\n    weight: \"1\",\n    line: []\n};\n\nfor (var x = 0; x < (points.length-21); x++) {\n    // [[lat, lon], [lat, lon]]\n    pastPath.line.push([points[x].position.lat, points[x].position.lon])\n}\n\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    // push path point to map\n    msg.payload = pastPath;\n    node.send(msg);\n    \n    msg.payload = predictedPath;\n    node.send(msg);\n}else\n{\n    // only predictedPath !\n    msg.payload = predictedPath;\n    node.send(msg);\n}\n\n\n\n//return msg;\n\n/*\n------------------------------------\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/","outputs":1,"noerr":0,"initialize":"","finalize":"","x":670,"y":1240,"wires":[["808961ff.232e7","5c10e05d.83b85"]]},{"id":"507bb0bc.b711","type":"link in","z":"53889699.701908","name":"","links":["53ad7c4c.02f314","52bed50c.8b8b7c"],"x":275,"y":1240,"wires":[["ed38556c.60d198","294eb7fc.3ae308"]]},{"id":"5c10e05d.83b85","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1030,"y":1240,"wires":[]},{"id":"c4d5f4c8.747968","type":"comment","z":"53889699.701908","name":"{20] - centerpont of path array","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":200,"y":1180,"wires":[]},{"id":"52bed50c.8b8b7c","type":"link out","z":"53889699.701908","name":"","links":["507bb0bc.b711"],"x":1195,"y":540,"wires":[]},{"id":"e56d565a.98d338","type":"function","z":"53889699.701908","name":"ETSI_433N","func":"var mapPin = {\n    name: \"ETSI_433N\",\n    layer: \"groundstations\",\n    label: true,\n    lat: 48.78,\n    lon: 11.53,\n    iconColor: \"white\",\n    icon: \"fa-home\"\n}\nmsg.payload = mapPin;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":650,"y":1340,"wires":[["808961ff.232e7"]]},{"id":"1c0dacd9.77aa63","type":"comment","z":"53889699.701908","name":"groundstation","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":130,"y":1360,"wires":[]},{"id":"e77d0241.254b5","type":"comment","z":"53889699.701908","name":"https://flows.nodered.org/node/node-red-contrib-web-worldmap","info":"","x":1130,"y":1180,"wires":[]},{"id":"1069205d.a1865","type":"http request","z":"53889699.701908","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://api.tinygs.com/v1/tles.txt","tls":"","persist":false,"proxy":"","authType":"","x":110,"y":560,"wires":[["49cb3430.01d74c"]]},{"id":"49cb3430.01d74c","type":"split","z":"53889699.701908","name":"","splt":"\\n","spltType":"str","arraySplt":"3","arraySpltType":"len","stream":false,"addname":"","x":270,"y":560,"wires":[["a54fa57e.520e18"]]},{"id":"a54fa57e.520e18","type":"join","z":"53889699.701908","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":270,"y":480,"wires":[["6607aa64.1afe64"]]},{"id":"b2dd56e0.bcbee8","type":"function","z":"53889699.701908","name":"Move the data to the override values","func":"var p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":510,"y":280,"wires":[["4ac851bf.2ec82","9b69ae70.19c89","48847f58.e6f5d"]]},{"id":"4ac851bf.2ec82","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":260,"wires":[[]]},{"id":"57076a71.b53754","type":"inject","z":"53889699.701908","name":"Now","props":[{"p":"payload"}],"repeat":"30","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":110,"y":160,"wires":[[]]},{"id":"b7633cc4.64dd4","type":"inject","z":"53889699.701908","name":"Now","props":[{"p":"payload"}],"repeat":"30","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":350,"y":700,"wires":[[]]},{"id":"7dcfacaf.1ae164","type":"function","z":"53889699.701908","name":"Satish Dhawan Satellite","func":"var p = msg.payload;\nmsg.satid = \"Satish Dhawan Satellite\"\nmsg.tle1 = \"1 47721U 21015W   21111.23768712 -.00000069  00000-0  00000+0 0  9997\"\nmsg.tle2 = \"2 47721  97.4630 186.0794 0012933  84.7234 275.5648 15.20604600  7887\"\nmsg.payload = Date.now()\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":250,"y":800,"wires":[[]]},{"id":"d0e3481f.82a0a8","type":"tle","z":"53889699.701908","satid":"Satish Dhawan Satellite","tle1":"1 47721U 21015W   21111.23768712 -.00000069  00000-0  00000+0 0  9997","tle2":"2 47721  97.4630 186.0794 0012933  84.7234 275.5648 15.20604600  7887","coordsys":"latlongdeg","name":"","x":830,"y":680,"wires":[[]]},{"id":"67754622.73ca18","type":"switch","z":"53889699.701908","name":"switch by msg.satid","property":"satid","propertyType":"msg","rules":[{"t":"eq","v":"Satish Dhawan Satellite","vt":"str"},{"t":"eq","v":"Sri Shakthi Sat (UNITYsat 3)","vt":"str"},{"t":"eq","v":"Flexible Experimental Embedded Satellite","vt":"str"},{"t":"eq","v":"Norby","vt":"str"},{"t":"eq","v":"VR3X-A Littlefoot","vt":"str"},{"t":"eq","v":"VR3X-B Petrie","vt":"str"},{"t":"eq","v":"VR3X-C Cera","vt":"str"}],"checkall":"false","repair":false,"outputs":7,"x":810,"y":560,"wires":[["4814811c.efac1","981248b0.c7ee38"],["dadab841.190418"],["c8eae33a.396cb"],["44d0deae.7c491"],["4980218c.2b34"],["1a915f49.303191"],["7a25f9f6.800708"]]},{"id":"dadab841.190418","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":460,"wires":[["52bed50c.8b8b7c"]]},{"id":"c8eae33a.396cb","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":500,"wires":[["52bed50c.8b8b7c"]]},{"id":"44d0deae.7c491","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":540,"wires":[["52bed50c.8b8b7c"]]},{"id":"4980218c.2b34","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":580,"wires":[["52bed50c.8b8b7c"]]},{"id":"be05d7f3.d43c28","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":960,"y":1320,"wires":[[]]},{"id":"57a143f3.faa98c","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":1400,"wires":[[]]},{"id":"1a915f49.303191","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":620,"wires":[["52bed50c.8b8b7c"]]},{"id":"7a25f9f6.800708","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":660,"wires":[["52bed50c.8b8b7c"]]},{"id":"52ef6065.64fdd","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":1050,"y":700,"wires":[["52bed50c.8b8b7c"]]},{"id":"98330998.78e238","type":"inject","z":"53889699.701908","name":"5s","props":[{"p":"payload"},{"p":"trigger","v":"5s","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":90,"y":240,"wires":[["5e9b8164.28097","bbe55d33.6f048"]]},{"id":"5521984d.c1af48","type":"template","z":"53889699.701908","name":"TLE","field":"payload","fieldType":"msg","format":"handlebars","syntax":"plain","template":"Norby\n1 46494U 20068J   21112.93695952  .00000536  00000-0  43758-4 0  9993\n2 46494  97.6905  50.8165 0016165 268.9534  90.9835 15.03563206 30992\nVR3X-A Littlefoot\n1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\n2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\nVR3X-B Petrie\n1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\n2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\nVR3X-C Cera\n1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\n2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\nSatish Dhawan Satellite\n1 47721U 21015W   21112.68538709 -.00000070  00000-0  00000-0 0  9991\n2 47721  97.4665 187.5208 0013745  94.4932 265.8482 15.20615680  8100\nSri Shakthi Sat (UNITYsat 3)\n1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\n2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\nFlexible Experimental Embedded Satellite\n1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\n2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235","output":"str","x":290,"y":380,"wires":[["49cb3430.01d74c"]]},{"id":"6607aa64.1afe64","type":"delay","z":"53889699.701908","name":"","pauseType":"rate","timeout":"1","timeoutUnits":"seconds","rate":"100","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":300,"y":420,"wires":[["be267d0.9b0f08"]]},{"id":"ed38556c.60d198","type":"delay","z":"53889699.701908","name":"","pauseType":"rate","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":430,"y":1340,"wires":[["e56d565a.98d338"]]},{"id":"294eb7fc.3ae308","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":410,"y":1240,"wires":[["57a143f3.faa98c","dabc8ca0.3a3d4","d4c4fd4b.b3767"]]},{"id":"a479e3ab.b2991","type":"timearray","z":"53889699.701908","plus":"90","minus":"","samples":"180","name":"predict path","x":610,"y":580,"wires":[["67754622.73ca18"]]},{"id":"9b69ae70.19c89","type":"switch","z":"53889699.701908","name":"trigger","property":"trigger","propertyType":"msg","rules":[{"t":"eq","v":"5s","vt":"str"},{"t":"eq","v":"90m","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":450,"y":560,"wires":[["263a1cc4.b8bec4"],["a479e3ab.b2991"]]},{"id":"4d96e8f3.17b0b8","type":"inject","z":"53889699.701908","name":"90m","props":[{"p":"payload"},{"p":"trigger","v":"90m","vt":"str"},{"p":"traffic","v":"hold","vt":"str"}],"repeat":"90","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":230,"y":220,"wires":[["5521984d.c1af48","de5586b9.83b838"]]},{"id":"de5586b9.83b838","type":"timeout","z":"53889699.701908","name":"My Timeout","outtopic":"","outsafe":"hold","outwarning":"Warning","outunsafe":"release","warning":"5","timer":"20","repeat":false,"again":false,"x":400,"y":100,"wires":[["e2976ca5.58bd1"]]},{"id":"5e9b8164.28097","type":"traffic","z":"53889699.701908","name":"","property_allow":"traffic","filter_allow":"^release","ignore_case_allow":true,"negate_allow":false,"send_allow":false,"property_stop":"traffic","filter_stop":"^hold","ignore_case_stop":true,"negate_stop":false,"send_stop":false,"default_start":true,"differ":false,"x":170,"y":300,"wires":[["5521984d.c1af48"]]},{"id":"e2976ca5.58bd1","type":"change","z":"53889699.701908","name":"","rules":[{"t":"set","p":"traffic","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":460,"y":220,"wires":[["5e9b8164.28097"]]},{"id":"4aec0e43.92d7e","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1240,"y":340,"wires":[[]]},{"id":"981248b0.c7ee38","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":420,"wires":[[]]},{"id":"48847f58.e6f5d","type":"function","z":"53889699.701908","name":"store tle into globals","func":"//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\n// split payload ... for deap inspection ...\nvar newS2 = msg.satid.split(\" \");\nvar newS3 = msg.tle1.split(\" \");\nvar newS4 = msg.tle2.split(\" \");\n\n// Debug\n/*\nmsg.newS2_0 = newS2[0];   // \"Norby\"\nmsg.newS3_0 = newS3[0];   // \"1\"\nmsg.newS4_0 = newS4[0];   // \"2\"\n*/\n\n// check field.splits starting with valid char \nif  (   (newS2[0] !== \"1\" && newS2[0] !== \"2\") &&\n        (newS3[0]  == \"1\" && newS4[0]  == \"2\")\n    )\n    {\n        // original count function ....\n        var count = context.get('count')||0;\n        count += 1;\n        // store the value back\n        context.set('count',count);\n        \n        \n        //for (let i = 0; i < msg.payload.length; i++) {\n            newS1 = msg.satid;\n            \n            // obj exits >> update\n            if (objStore[newS1]) {\n                \n                //deny = objStore[newS1].deny || 0;\n                \n                objStore[newS1].satid = msg.satid;\n                objStore[newS1].tle1 =  msg.tle1;\n                objStore[newS1].tle2 =  msg.tle2;\n                \n            }\n            else{  // object new \n        \n            // create object to store  \n            objStore[newS1] =\n                    {\n                    satid: msg.satid,\n                    tle1:  msg.tle1,\n                    tle2:  msg.tle2\n                    }\n            }\n            \n        //}  // end for\n\n        //store global object\n        global.set('TLEs',objStore);\n        \n        // show status\n        node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n        \n} // end if valid\nelse\n{\n        // show status\n        node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n\n}\n\n\n//return msg;\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":820,"y":40,"wires":[["713dbbf.c159244"]]},{"id":"713dbbf.c159244","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1120,"y":140,"wires":[[]]},{"id":"be267d0.9b0f08","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","x":360,"y":340,"wires":[["b2dd56e0.bcbee8"]]},{"id":"88b6d27.1c8a33","type":"template","z":"53889699.701908","name":"TLE object","field":"template","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n  \"Norby\": {\n    \"satid\": \"Norby\",\n    \"tle1\": \"1 46494U 20068J   21112.93695952  .00000536  00000-0  43758-4 0  9993\",\n    \"tle2\": \"2 46494  97.6905  50.8165 0016165 268.9534  90.9835 15.03563206 30992\"\n  },\n  \"VR3X-A Littlefoot\": {\n    \"satid\": \"VR3X-A Littlefoot\",\n    \"tle1\": \"1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\",\n    \"tle2\": \"2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\"\n  },\n  \"VR3X-B Petrie\": {\n    \"satid\": \"VR3X-B Petrie\",\n    \"tle1\": \"1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\",\n    \"tle2\": \"2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\"\n  },\n  \"VR3X-C Cera\": {\n    \"satid\": \"VR3X-C Cera\",\n    \"tle1\": \"1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\",\n    \"tle2\": \"2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\"\n  },\n  \"Satish Dhawan Satellite\": {\n    \"satid\": \"Satish Dhawan Satellite\",\n    \"tle1\": \"1 47721U 21015W   21112.68538709 -.00000070  00000-0  00000-0 0  9991\",\n    \"tle2\": \"2 47721  97.4665 187.5208 0013745  94.4932 265.8482 15.20615680  8100\"\n  },\n  \"Sri Shakthi Sat (UNITYsat 3)\": {\n    \"satid\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"tle1\": \"1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\",\n    \"tle2\": \"2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\"\n  },\n  \"Flexible Experimental Embedded Satellite\": {\n    \"satid\": \"Flexible Experimental Embedded Satellite\",\n    \"tle1\": \"1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\",\n    \"tle2\": \"2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235\"\n  }\n}","output":"str","x":550,"y":40,"wires":[[]]},{"id":"cfb3e977.326358","type":"function","z":"53889699.701908","name":"get tle from globals","func":"// read TLE from globals ....\n\n// original count function ....\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n\n//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\nlet k;\nlet i = -1; \nfor (k in objStore) {\n\n    ++i;\n\n    // only predictedPath !\n    msg.payload = {\"satid\": k , \"idx\": i};\n    node.send(msg);\n\n    /*        k : key\n     *   obj[k] : value\n     */\n}\n\n\n\n\n/*\n\n\n\n//for (let i = 0; i < msg.payload.length; i++) {\n    newS1 = msg.satid;\n    \n    // obj exits >> update\n    if (objStore[newS1]) {\n        \n        //deny = objStore[newS1].deny || 0;\n        \n        objStore[newS1].satid = msg.satid;\n        objStore[newS1].tle1 =  msg.tle1;\n        objStore[newS1].tle2 =  msg.tle2;\n        \n    }\n    else{  // object new \n\n    // create object to store  \n    objStore[newS1] =\n            {\n            satid: msg.satid,\n            tle1:  msg.tle1,\n            tle2:  msg.tle2\n            }\n        \n    }\n\n\n\n/*    \n    objStore[newS1] = msg.payload[i];\n    \n    if (init == 0) {\n        deny = 1000;\n        context.set('init_done', 1);\n    }\n    \n    objStore[newS1].deny = deny;\n*/\n\n//}\n\n//store global object\n//global.set('TLEs',objStore);\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" count: \" + count});\n\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":810,"y":100,"wires":[["566d4ba9.3943d4"]]},{"id":"bbe55d33.6f048","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","x":600,"y":100,"wires":[["cfb3e977.326358"]]}]