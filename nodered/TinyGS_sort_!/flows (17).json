[{"id":"e7455f72.1939f","type":"subflow","name":"Sub Timestamp","info":"create Timestamp out of Systime\n\nInput\n\nTriggered by any Message\n\n---\nOutput\n\n * Input message is passed unchanged.\n\n * new Objects add:  \n    * msg.timestamp.ts = YYYY-MM-DD HH:MM.SS\n    * msg.timestamp.YYYY\n    * msg.timestamp.MM\n    * msg.timestamp.DD\n    * msg.timestamp.hh\n    * msg.timestamp.mm\n    * msg.timestamp.ss\n\n\n---\n\n#Todo:\n\n---\n\nDetails:\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\n","in":[{"x":430,"y":90,"wires":[{"id":"89417cc1.a5d33"}]}],"out":[{"x":1140,"y":90,"wires":[{"id":"89417cc1.a5d33","port":0}]}]},{"id":"89417cc1.a5d33","type":"function","z":"e7455f72.1939f","name":"TimeStamp","func":"// https://www.npmjs.com/package/dateformat\n\n\n\n// (1) wandelt timestamp ins ISO Datumformat um\n//msg.timestamp= new Date().toISOString()\n\n// (2) beliebiges Datum festlegbar: hier: YYYY-MM-DD HH:MM.SS\n//     (Ausgabeformat wird danz am Ende zusammengestellt)\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \n\n// check / set leading Zero\nif(month.toString().length == 1) {\n    month = '0'+month;\n}\nif(day.toString().length == 1) {\n    day = '0'+day;\n}   \nif(hour.toString().length == 1) {\n    hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\n    minute = '0'+minute;\n}\nif(second.toString().length == 1) {\n    second = '0'+second;\n} \n\n// convert to String\nyear    = year.toString();\nmonth   = month.toString();\nday     = day.toString();\nhour    = hour.toString();\nminute  = minute.toString();\nsecond  = second.toString();\n\n\n// concat tempVar Timestamp with Format\nvar tp_Timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Windoof Format \nvar tp_TimestampWin = year+'-'+month+'-'+day+'_'+hour+minute+second;\n\n\n// Variante1: wenn z.B. nicht ein vorhandener Payload\n// überschrieben werden soll, sondern um ein\n// Datum ergänzt werden soll.  \n\n// create Object \"timestamp\"\nmsg.timestamp = { \n                    ts    : tp_Timestamp,\n                    tswin : tp_TimestampWin,\n                \n                    // additional Outputs:\n                    YYYY  : year,\n                    MM    : month,\n                    DD    : day,\n                    hh    : hour,\n                    mm    : minute,\n                    ss    : second\n                };\n                    \n// single Message                    \n//msg.timestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n// Variante 2: Function gibt die aktuelle Zeit als payload aus\n//msg.payload = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","outputs":"1","noerr":0,"x":770,"y":90,"wires":[[]]},{"id":"f8ee140e.258a98","type":"comment","z":"e7455f72.1939f","name":" YYYY-MM-DD HH:MM.SS","info":"","x":1000,"y":40,"wires":[]},{"id":"53889699.701908","type":"tab","label":"sat demo 2","disabled":false,"info":""},{"id":"566d4ba9.3943d4","type":"debug","z":"53889699.701908","name":"Sat Debug; TLE from global","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1260,"y":320,"wires":[]},{"id":"16bc1f1c.fed391","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":140,"wires":[[]]},{"id":"a1e0e91f.905808","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1000,"y":1280,"wires":[]},{"id":"89ba85e4.dc4378","type":"inject","z":"53889699.701908","name":"3h","props":[{"p":"payload"}],"repeat":"10800","crontab":"","once":true,"onceDelay":"5","topic":"","payload":"","payloadType":"date","x":110,"y":200,"wires":[["1069205d.a1865"]]},{"id":"710ea20e.9c4a1c","type":"link out","z":"53889699.701908","name":"","links":["1d19bd5a.960f33"],"x":495,"y":980,"wires":[]},{"id":"808961ff.232e7","type":"worldmap","z":"53889699.701908","name":"","lat":"48.78","lon":"11.53","zoom":"","layer":"Esri Dark Grey","cluster":"","maxage":"","usermenu":"show","panit":"false","hiderightclick":"false","coords":"none","path":"","x":950,"y":1380,"wires":[]},{"id":"d7342b29.7520c8","type":"comment","z":"53889699.701908","name":"lat  48.78 / lon 11.53 / alt 433","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":140,"y":40,"wires":[]},{"id":"4814811c.efac1","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":580,"wires":[["52bed50c.8b8b7c","4aec0e43.92d7e"]]},{"id":"263a1cc4.b8bec4","type":"timearray","z":"53889699.701908","plus":"5","minus":"5","samples":"40","name":"actual path","x":410,"y":700,"wires":[["67754622.73ca18"]]},{"id":"dabc8ca0.3a3d4","type":"function","z":"53889699.701908","name":"Extract LatLon{20]","func":"\n// remove -20 from name \n// var sname = msg.payload[20].name.split(\"-\");\nvar pname  = msg.satid;\n\n\n// https://www.delftstack.com/de/howto/javascript/javascript-convert-timestamp-to-date/\n// eta \n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\nvar gSat  = gTLEs[pname]\n\n\n// default\nvar sat_color  = \"white\";\nvar spot_color = \"#aaaa00\";\n// yellow \n\n// calculate inRange, actual Position\nvar lat_inRange = inRange(lat, (gs.lat  -5), (gs.lat  +5))\nvar lon_inRange = inRange(lon, (gs.lon -15), (gs.lon +15))\n\nif ( lat_inRange && lon_inRange )\n{   sat_color  = \"green\"; \n    spot_color = \"green\";\n    // delete pass + eta\n    gSat.eta    =  \"now\";\n    gSat.p_pass =  \"\";\n    \n    // store TLE*s to global object\n    global.set('TLEs',gTLEs)\n\n}\nelse if(gSat.eta !=\"\" && gSat.eta != \"now\" )      // predicted eta of first contact  \n{   sat_color  = \"yellow\";\n    spot_color = \"\";\n}\nelse\n{   sat_color  = \"white\";\n    spot_color = \"\";\n    \n    if(gSat.eta == \"now\" )      // contact ..lost  \n    {\n        gSat.eta =  \"\";         // clear eta\n        // store TLE*s to global object\n        global.set('TLEs',gTLEs)\n    }\n    \n}\n\n\n/*\naaa: inRange(5, 1, 10),\nbbb: inRange(-5, 1, 10),\nccc: inRange(20, 1, 10)\n*/\n\nvar mapPin = {\n    name: pname,\n    label: true,\n    layer: \"satellites\",\n    lat: msg.payload[20].position.lat,\n    lon: msg.payload[20].position.lon,\n    level: (msg.payload[20].position.alt / 1000).toFixed(3).toString() + \" km \",\n    // alt is a keywords .. NaN, no string possible ! \n    //alt: + toString(msg.payload[20].position.alt / 1000) + \" km \",\n\n    eta: gSat.eta,\n    \n    iconColor: sat_color,\n    icon: \"satellite\",\n}\n\n// The radius property is specified in meters.\nvar mapspotCircle = {\n    name: pname +\"_spotCircle\",\n    layer: \"spot-circle\",\n    lat: msg.payload[20].position.lat,\n    lon: msg.payload[20].position.lon,\n    radius: 700000,\n    fillOpacity: 0.1,\n    fillColor: spot_color,\n    color: spot_color\n}\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\")\n{\n    // push Pin to map\n    msg.payload = mapPin;\n    node.send(msg);\n    \n    // push spotCircle to map\n    msg.payload = mapspotCircle;\n    node.send(msg);\n}\n\n\n/*\n------------------------------------\n\n// object\n{\n  \"name\": \"Flexible Experimental Embedded Satellite-0\",\n  \"timestamp\": 1619204201542,\n  \"position\": {\n    \"x\": 4863168.36639839,\n    \"y\": 2116263.7008535494,\n    \"z\": -4480738.832871702,\n    \"lat\": -40.3664641843842,\n    \"lon\": -112.6933102329231,\n    \"alt\": 573846.6987718521\n  },\n  \"velocity\": {\n    \"x\": 4926.299158348896,\n    \"y\": 722.1741646985236,\n    \"z\": 5697.355243624375\n  }\n}\n\n\n\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":650,"y":1460,"wires":[["808961ff.232e7","be05d7f3.d43c28","a1e0e91f.905808"]]},{"id":"d4c4fd4b.b3767","type":"function","z":"53889699.701908","name":"Convert to Path{20]","func":"var points = msg.payload;\n//var pname  = msg.payload[0].name;\nvar pname  = msg.satid;\n\n// return true if in range, otherwise false\nfunction inRange(x, min, max) {\n    return ((x-min)*(x-max) <= 0);\n}\n\n// actual Pos ( center 20 ) \nvar lat= msg.payload[20].position.lat;\nvar lon= msg.payload[20].position.lon;\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\nvar gSat  = gTLEs[pname]\n\n// Debug\n//msg.debug = {\"gSat\": gSat , \"gTLEs\": gTLEs , \"gSat.alt\": gSat.alt};\n//msg.debug = {\"gSat\": gSat , \"gTLEs\": gTLEs};\n//node.send(msg);\n\n\n// default\nvar sat_color  = \"white\";\nvar spot_color = \"\";\n\n\n// predicted path ....\nvar predictedPath = {\n    name: 'predicted_path_'+ pname,\n    layer: \"path lines\",\n    color: sat_color,\n    weight: \"1\",\n//    dashArray: \"20 10\",\n    line: []\n};\n\n\n// starting point of path prediction with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    i = 21;\n}else\n{\n    i = 0;\n    \n    // set eta to undefined \n    var eta;\n\n// flow tag ohne spaces !!\n// trim() only removes  head+tail spaces\n\n    var tpname = pname.replace(/\\s+/g, '');\n    flow.set(tpname,eta);\n    \n    // delete pass + eta\n    gSat.eta    =  \"\";\n    gSat.p_pass =  \"\";\n    \n}\n\n \nfor (var i ; i < points.length; i++) {\n    // [[lat, lon], [lat, lon]]\n    predictedPath.line.push([points[i].position.lat, points[i].position.lon])\n\n    // push only with \"90m\" Trigger\n    if (msg.trigger == \"90m\" )\n    {\n    // calculate inRange, waypoint\n    var lat_inRange = inRange(points[i].position.lat, (gs.lat  -5), (gs.lat  +5))\n    var lon_inRange = inRange(points[i].position.lon, (gs.lon -10), (gs.lon +10))\n    \n        if ( lat_inRange && lon_inRange && !eta )\n        {   sat_color  = \"yellow\"; \n            spot_color = \"yellow\";\n        \n            predictedPath.color = sat_color;\n            \n            //var timestamp = 1607110465663\n            eta = new Date(points[i].timestamp);\n            tpname = pname.replace(/\\s+/g, '');\n            flow.set(tpname,eta);                   // trimed var - unexpected ' ' error\n            \n            // store pass + eta\n            // predicted first contact\n            gSat.eta    =  eta;\n            gSat.p_pass =  pname;\n            \n        }\n\n    }\n    \n} // end for\n\n// store TLE*s to global object\nglobal.set('TLEs',gTLEs)\n\n\n// -------------------------------------------\n// starting point of path prediction with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    // past path ....\n    var pastPath = {\n        name: 'past_path_' + pname,\n        layer: \"path lines\",\n        color: sat_color,\n        dashArray: \"20 10\",\n        weight: \"1\",\n        line: []\n    };\n    \n    for (var x = 0; x < (points.length-21); x++) {\n        // [[lat, lon], [lat, lon]]\n        pastPath.line.push([points[x].position.lat, points[x].position.lon])\n    }\n}\n\n\n// push only with \"5s\" Trigger\nif (msg.trigger == \"5s\" )\n{\n    // push path point to map\n    msg.payload = pastPath;\n    node.send(msg);\n    \n    msg.payload = predictedPath;\n    node.send(msg);\n}else\n{\n    // only predictedPath !\n    msg.payload = predictedPath;\n    node.send(msg);\n}\n\n\n\n//return msg;\n\n\n\n\n/*\n------------------------------------\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\n// groundstation\nvar gs = {\n    name: \"ETSI_433N\",\n    lat: 48.78,\n    lon: 11.53,\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/","outputs":1,"noerr":0,"initialize":"","finalize":"","x":650,"y":1500,"wires":[["808961ff.232e7","ebe4a531.edb198"]]},{"id":"507bb0bc.b711","type":"link in","z":"53889699.701908","name":"","links":["53ad7c4c.02f314","52bed50c.8b8b7c"],"x":255,"y":1500,"wires":[["ed38556c.60d198","294eb7fc.3ae308"]]},{"id":"5c10e05d.83b85","type":"debug","z":"53889699.701908","name":"Message coming out of TLE node","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":960,"y":1680,"wires":[]},{"id":"c4d5f4c8.747968","type":"comment","z":"53889699.701908","name":"{20] - centerpont of path array","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":180,"y":1440,"wires":[]},{"id":"52bed50c.8b8b7c","type":"link out","z":"53889699.701908","name":"","links":["507bb0bc.b711"],"x":1035,"y":700,"wires":[]},{"id":"e56d565a.98d338","type":"function","z":"53889699.701908","name":"ETSI_433N","func":"// get groundstation from global object\nvar gs = global.get('gs')\n\n\nvar mapPin = {\n    name: gs.name,\n    layer: \"groundstations\",\n    label: true,\n    info: \"the home of the wobber ...\",\n    lat: gs.lat,\n    lon: gs.lon,\n    iconColor: \"white\",\n    icon: \"fa-home\"\n}\nmsg.payload = mapPin;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":1600,"wires":[["808961ff.232e7"]]},{"id":"1c0dacd9.77aa63","type":"comment","z":"53889699.701908","name":"groundstation","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":130,"y":1600,"wires":[]},{"id":"e77d0241.254b5","type":"comment","z":"53889699.701908","name":"https://flows.nodered.org/node/node-red-contrib-web-worldmap","info":"","x":1090,"y":1460,"wires":[]},{"id":"1069205d.a1865","type":"http request","z":"53889699.701908","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://api.tinygs.com/v1/tles.txt","tls":"","persist":false,"proxy":"","authType":"","x":270,"y":200,"wires":[["49cb3430.01d74c"]]},{"id":"49cb3430.01d74c","type":"split","z":"53889699.701908","name":"","splt":"\\n","spltType":"str","arraySplt":"3","arraySpltType":"len","stream":false,"addname":"","x":450,"y":160,"wires":[["a54fa57e.520e18"]]},{"id":"a54fa57e.520e18","type":"join","z":"53889699.701908","name":"","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":450,"y":200,"wires":[["6607aa64.1afe64"]]},{"id":"b2dd56e0.bcbee8","type":"function","z":"53889699.701908","name":"override values","func":"var p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1020,"y":200,"wires":[["4ac851bf.2ec82","48847f58.e6f5d"]]},{"id":"4ac851bf.2ec82","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1200,"y":140,"wires":[[]]},{"id":"57076a71.b53754","type":"inject","z":"53889699.701908","name":"1s","props":[{"p":"payload"}],"repeat":"5","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":430,"y":1400,"wires":[["ab8c6dff.94736"]]},{"id":"7dcfacaf.1ae164","type":"function","z":"53889699.701908","name":"Satish Dhawan Satellite","func":"var p = msg.payload;\nmsg.satid = \"Satish Dhawan Satellite\"\nmsg.tle1 = \"1 47721U 21015W   21111.23768712 -.00000069  00000-0  00000+0 0  9997\"\nmsg.tle2 = \"2 47721  97.4630 186.0794 0012933  84.7234 275.5648 15.20604600  7887\"\nmsg.payload = Date.now()\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":430,"y":1020,"wires":[[]]},{"id":"d0e3481f.82a0a8","type":"tle","z":"53889699.701908","satid":"Satish Dhawan Satellite","tle1":"1 47721U 21015W   21111.23768712 -.00000069  00000-0  00000+0 0  9997","tle2":"2 47721  97.4630 186.0794 0012933  84.7234 275.5648 15.20604600  7887","coordsys":"latlongdeg","name":"","x":370,"y":980,"wires":[[]]},{"id":"67754622.73ca18","type":"switch","z":"53889699.701908","name":"switch by msg.index","property":"index","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"eq","v":"1","vt":"num"},{"t":"eq","v":"2","vt":"num"},{"t":"eq","v":"3","vt":"num"},{"t":"eq","v":"4","vt":"num"},{"t":"eq","v":"5","vt":"num"},{"t":"eq","v":"6","vt":"num"},{"t":"eq","v":"7","vt":"num"}],"checkall":"false","repair":false,"outputs":8,"x":640,"y":720,"wires":[["981248b0.c7ee38","4814811c.efac1"],["dadab841.190418"],["c8eae33a.396cb"],["44d0deae.7c491"],["4980218c.2b34"],["1a915f49.303191"],["7a25f9f6.800708"],["d6d53ed0.9b21e","52ef6065.64fdd"]]},{"id":"dadab841.190418","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":620,"wires":[["52bed50c.8b8b7c"]]},{"id":"c8eae33a.396cb","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":660,"wires":[["52bed50c.8b8b7c"]]},{"id":"44d0deae.7c491","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":700,"wires":[["52bed50c.8b8b7c"]]},{"id":"4980218c.2b34","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":740,"wires":[["52bed50c.8b8b7c"]]},{"id":"be05d7f3.d43c28","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":920,"y":1560,"wires":[[]]},{"id":"57a143f3.faa98c","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":620,"y":1660,"wires":[[]]},{"id":"1a915f49.303191","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":780,"wires":[["52bed50c.8b8b7c","64258ec0.123f4"]]},{"id":"7a25f9f6.800708","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":820,"wires":[["52bed50c.8b8b7c","10cbeec8.705561"]]},{"id":"52ef6065.64fdd","type":"tle","z":"53889699.701908","satid":"","tle1":"","tle2":"","coordsys":"latlongdeg","name":"","x":890,"y":860,"wires":[["52bed50c.8b8b7c","2f268d66.7c6212"]]},{"id":"98330998.78e238","type":"inject","z":"53889699.701908","name":"5s","props":[{"p":"payload"},{"p":"trigger","v":"5s","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":110,"y":480,"wires":[["5e9b8164.28097"]]},{"id":"5521984d.c1af48","type":"template","z":"53889699.701908","name":"TLE - text","field":"payload","fieldType":"msg","format":"handlebars","syntax":"plain","template":"Norby\n1 46494U 20068J   21112.93695952  .00000536  00000-0  43758-4 0  9993\n2 46494  97.6905  50.8165 0016165 268.9534  90.9835 15.03563206 30992\nVR3X-A Littlefoot\n1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\n2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\nVR3X-B Petrie\n1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\n2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\nVR3X-C Cera\n1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\n2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\nSatish Dhawan Satellite\n1 47721U 21015W   21112.68538709 -.00000070  00000-0  00000-0 0  9991\n2 47721  97.4665 187.5208 0013745  94.4932 265.8482 15.20615680  8100\nSri Shakthi Sat (UNITYsat 3)\n1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\n2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\nFlexible Experimental Embedded Satellite\n1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\n2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235","output":"str","x":700,"y":80,"wires":[[]]},{"id":"6607aa64.1afe64","type":"delay","z":"53889699.701908","name":"","pauseType":"rate","timeout":"1","timeoutUnits":"seconds","rate":"100","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":640,"y":200,"wires":[["be267d0.9b0f08","16bc1f1c.fed391"]]},{"id":"ed38556c.60d198","type":"delay","z":"53889699.701908","name":"","pauseType":"rate","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":410,"y":1600,"wires":[["e56d565a.98d338"]]},{"id":"294eb7fc.3ae308","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":390,"y":1500,"wires":[["57a143f3.faa98c","d4c4fd4b.b3767","dabc8ca0.3a3d4"]]},{"id":"a479e3ab.b2991","type":"timearray","z":"53889699.701908","plus":"180","minus":"","samples":"360","name":"predict path","x":410,"y":740,"wires":[["67754622.73ca18"]]},{"id":"9b69ae70.19c89","type":"switch","z":"53889699.701908","name":"trigger","property":"trigger","propertyType":"msg","rules":[{"t":"eq","v":"5s","vt":"str"},{"t":"eq","v":"90m","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":250,"y":720,"wires":[["263a1cc4.b8bec4"],["a479e3ab.b2991"]]},{"id":"4d96e8f3.17b0b8","type":"inject","z":"53889699.701908","name":"90m","props":[{"p":"payload"},{"p":"trigger","v":"90m","vt":"str"},{"p":"traffic","v":"hold","vt":"str"}],"repeat":"60","crontab":"","once":false,"onceDelay":"","topic":"","payload":"","payloadType":"date","x":110,"y":360,"wires":[["de5586b9.83b838","bbe55d33.6f048"]]},{"id":"de5586b9.83b838","type":"timeout","z":"53889699.701908","name":"My Timeout","outtopic":"","outsafe":"hold","outwarning":"Warning","outunsafe":"release","warning":"5","timer":"20","repeat":false,"again":false,"x":270,"y":400,"wires":[["e2976ca5.58bd1"]]},{"id":"5e9b8164.28097","type":"traffic","z":"53889699.701908","name":"block 5s trigger ,to show predictiv path","property_allow":"traffic","filter_allow":"^release","ignore_case_allow":true,"negate_allow":false,"send_allow":false,"property_stop":"traffic","filter_stop":"^hold","ignore_case_stop":true,"negate_stop":false,"send_stop":false,"default_start":true,"differ":false,"x":530,"y":480,"wires":[["bbe55d33.6f048"]]},{"id":"e2976ca5.58bd1","type":"change","z":"53889699.701908","name":"traffic - control","rules":[{"t":"set","p":"traffic","pt":"msg","to":"payload","tot":"msg"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":480,"y":400,"wires":[["5e9b8164.28097"]]},{"id":"4aec0e43.92d7e","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1060,"y":560,"wires":[[]]},{"id":"981248b0.c7ee38","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":740,"y":560,"wires":[[]]},{"id":"48847f58.e6f5d","type":"function","z":"53889699.701908","name":"store tle into globals","func":"//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\n// split payload ... for deap inspection ...\nvar newS2 = msg.satid.split(\" \");\nvar newS3 = msg.tle1.split(\" \");\nvar newS4 = msg.tle2.split(\" \");\n\n// Debug\n/*\nmsg.newS2_0 = newS2[0];   // \"Norby\"\nmsg.newS3_0 = newS3[0];   // \"1\"\nmsg.newS4_0 = newS4[0];   // \"2\"\n*/\n\n// check field.splits starting with valid char \nif  (   (newS2[0] !== \"1\" && newS2[0] !== \"2\") &&\n        (newS3[0]  == \"1\" && newS4[0]  == \"2\")\n    )\n    {\n        // original count function ....\n        var count = context.get('count')||0;\n        count += 1;\n        // store the value back\n        context.set('count',count);\n        \n        \n        //for (let i = 0; i < msg.payload.length; i++) {\n            newS1 = msg.satid;\n            \n    // obj exits >> update\n            if (objStore[newS1]) {\n                \n                //deny = objStore[newS1].deny || 0;\n                \n                objStore[newS1].satid = msg.satid;\n                objStore[newS1].tle1 =  msg.tle1;\n                objStore[newS1].tle2 =  msg.tle2;\n                \n            }\n            else{  // object new \n        \n    // create new object to store  \n            objStore[newS1] =\n                    {\n                    satid: msg.satid,\n                    tle1:  msg.tle1,\n                    tle2:  msg.tle2,\n                    eta:   \"\",\n                    alt:   0,\n                    satidAlias: \"\",     // shorter name \n                    d_eta_utc: 0,       // delta eta in millis\n                    d_eta:  \"\",         // -h delta eta T- 00:00:00 \n                    p_pass: \"\"\n                    }\n            }\n            \n        //}  // end for\n\n        //store global object\n        global.set('TLEs',objStore);\n        \n        // show status\n        node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n        \n} // end if valid\nelse\n{\n        // show status\n        node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n\n}\n\n\n//return msg;\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":260,"wires":[[]]},{"id":"be267d0.9b0f08","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","x":840,"y":200,"wires":[["b2dd56e0.bcbee8"]]},{"id":"88b6d27.1c8a33","type":"template","z":"53889699.701908","name":"TLE object","field":"template","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n  \"Norby\": {\n    \"satid\": \"Norby\",\n    \"tle1\": \"1 46494U 20068J   21112.93695952  .00000536  00000-0  43758-4 0  9993\",\n    \"tle2\": \"2 46494  97.6905  50.8165 0016165 268.9534  90.9835 15.03563206 30992\"\n  },\n  \"VR3X-A Littlefoot\": {\n    \"satid\": \"VR3X-A Littlefoot\",\n    \"tle1\": \"1 47463U 21006BC  21053.86202839  .00001407  00000-0  86849-4 0  9993\",\n    \"tle2\": \"2 47463  97.4990 116.9904 0010605 151.3085 208.8730 15.11473292  4725\"\n  },\n  \"VR3X-B Petrie\": {\n    \"satid\": \"VR3X-B Petrie\",\n    \"tle1\": \"1 47467U 21006BG  21053.86075148  .00001393  00000-0  85861-4 0  9995\",\n    \"tle2\": \"2 47467  97.4995 116.9939 0010666 149.8091 210.3756 15.11539090  4723\"\n  },\n  \"VR3X-C Cera\": {\n    \"satid\": \"VR3X-C Cera\",\n    \"tle1\": \"1 47524U 21006DQ  21054.12407896  .00001439  00000-0  88390-4 0  9999\",\n    \"tle2\": \"2 47524  97.5005 117.2599 0010665 146.9421 213.2478 15.11615930  4765\"\n  },\n  \"Satish Dhawan Satellite\": {\n    \"satid\": \"Satish Dhawan Satellite\",\n    \"tle1\": \"1 47721U 21015W   21112.68538709 -.00000070  00000-0  00000-0 0  9991\",\n    \"tle2\": \"2 47721  97.4665 187.5208 0013745  94.4932 265.8482 15.20615680  8100\"\n  },\n  \"Sri Shakthi Sat (UNITYsat 3)\": {\n    \"satid\": \"Sri Shakthi Sat (UNITYsat 3)\",\n    \"tle1\": \"1 47716U 21015T   21093.52252237 -.00000070  00000+0  00000+0 0  9993\",\n    \"tle2\": \"2 47716  97.4585 168.5207 0013232 160.9461 199.2332 15.21085427  5090\"\n  },\n  \"Flexible Experimental Embedded Satellite\": {\n    \"satid\": \"Flexible Experimental Embedded Satellite\",\n    \"tle1\": \"1 48041U 21022AK  21111.22834664  .00001991  00000-0  13898-3 0  9997\",\n    \"tle2\": \"2 48041  97.5627  14.5584 0016718 132.6933 347.0891 15.06393376  3235\"\n  }\n}","output":"str","x":870,"y":80,"wires":[[]]},{"id":"cfb3e977.326358","type":"function","z":"53889699.701908","name":"get tle from globals","func":"// read TLE from globals ....\n\n// original count function ....\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n\n//get global object\n//var objStore = global.get('TLEs') || {};\nvar objStore = global.get('TLEs');\n\nvar newS1; // objectname inside objStore\n\n// interate through object .....\n// if object exist \nif (objStore){\n    let k;\n    let i = -1; \n    \n    for (k in objStore) {\n    \n        // k - objectname NOT the object !\n        // i - index \n        ++i;\n    \n        msg.satid = objStore[k][\"satid\"];\n        msg.tle1 =  objStore[k][\"tle1\"];\n        msg.tle2 =  objStore[k][\"tle2\"];\n        msg.payload = Date.now();\n        \n        msg.index = i;\n        \n        // Debug\n        //msg.debug = {\"satid\": k , \"idx\": i};\n        \n        node.send(msg);\n    \n    } // end for loop\n\n    // show status\n    node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n\n}\nelse{\n\n    // show status\n    node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , object not exist ... yet...\"});\n    \n}\n\n\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\nmsg.payload = Date.now()\n\nreturn msg;\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":970,"y":360,"wires":[["566d4ba9.3943d4","f7dbb12d.938a1","eee86634.bdc5b8"]]},{"id":"bbe55d33.6f048","type":"subflow:e7455f72.1939f","z":"53889699.701908","name":"","x":760,"y":360,"wires":[["cfb3e977.326358"]]},{"id":"62f921ba.68b75","type":"worldmap in","z":"53889699.701908","name":"","path":"/worldmap","events":"all","x":120,"y":1860,"wires":[["6b2fa809.6e2a78","3d4e577d.0f6e98"]]},{"id":"6b2fa809.6e2a78","type":"debug","z":"53889699.701908","name":"SAT Debug: worldmap out","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":600,"y":1840,"wires":[]},{"id":"29dbaee1.0430c2","type":"inject","z":"53889699.701908","name":"grid off","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"grid\":{\"showgrid\":false,\"opt\":{\"showLabel\":true,\"dashArray\":[5,5],\"fontColor\":\"#900\"}}}}","payloadType":"json","x":370,"y":1220,"wires":[["808961ff.232e7"]]},{"id":"7b415122.3a76d","type":"inject","z":"53889699.701908","name":"grid on","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"grid\":{\"showgrid\":true,\"opt\":{\"showLabel\":true,\"dashArray\":[5,5],\"fontColor\":\"#900\"}}}}","payloadType":"json","x":374,"y":1180,"wires":[["808961ff.232e7"]]},{"id":"93882bdd.590a88","type":"inject","z":"53889699.701908","name":"groundstation - ETSI ","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"{\"name\":\"ETSI_433N\",\"lat\":48.78,\"lon\":11.53,\"alt\":433}","payloadType":"json","x":180,"y":80,"wires":[["d38d7a65.c91658"]]},{"id":"d38d7a65.c91658","type":"change","z":"53889699.701908","name":"set global - gs ","rules":[{"t":"set","p":"gs","pt":"global","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":430,"y":80,"wires":[[]]},{"id":"9a34bc7.a33a74","type":"switch","z":"53889699.701908","name":"switch by msg.satid","property":"satid","propertyType":"msg","rules":[{"t":"eq","v":"Satish Dhawan Satellite","vt":"str"},{"t":"eq","v":"Sri Shakthi Sat (UNITYsat 3)","vt":"str"},{"t":"eq","v":"Flexible Experimental Embedded Satellite","vt":"str"},{"t":"eq","v":"Norby","vt":"str"},{"t":"eq","v":"VR3X-A Littlefoot","vt":"str"},{"t":"eq","v":"VR3X-B Petrie","vt":"str"},{"t":"eq","v":"VR3X-C Cera","vt":"str"}],"checkall":"false","repair":false,"outputs":7,"x":190,"y":980,"wires":[[],[],[],[],[],[],[]]},{"id":"d245bd14.e6141","type":"comment","z":"53889699.701908","name":"TLE from Server ","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":100,"y":160,"wires":[]},{"id":"6d84be3a.870ad","type":"comment","z":"53889699.701908","name":"Trigger predictiv path","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":120,"y":320,"wires":[]},{"id":"f7da9a7c.f5f078","type":"comment","z":"53889699.701908","name":"Trigger actual path","info":"worldmap\n\ngroundstation \nlat  48.78 / lon 11.53 / alt 433\n\n","x":110,"y":440,"wires":[]},{"id":"d6d53ed0.9b21e","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":760,"y":900,"wires":[[]]},{"id":"2f268d66.7c6212","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1060,"y":900,"wires":[[]]},{"id":"1189c712.1701e9","type":"comment","z":"53889699.701908","name":"map control ","info":"worldmap\n\ngroundstation \nlat  48.78 / long 11.53\n\n","x":370,"y":1100,"wires":[]},{"id":"f7dbb12d.938a1","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1200,"y":260,"wires":[[]]},{"id":"eee86634.bdc5b8","type":"function","z":"53889699.701908","name":"noop","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1290,"y":380,"wires":[["9b69ae70.19c89"]]},{"id":"10cbeec8.705561","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1060,"y":840,"wires":[[]]},{"id":"64258ec0.123f4","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1060,"y":780,"wires":[[]]},{"id":"656e17f6.ebc1b8","type":"switch","z":"53889699.701908","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":850,"y":1740,"wires":[[]]},{"id":"2270c8b8.b668a8","type":"status","z":"53889699.701908","name":"","scope":["808961ff.232e7"],"x":120,"y":1820,"wires":[[]]},{"id":"3d4e577d.0f6e98","type":"switch","z":"53889699.701908","name":"action","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"connected","vt":"str"},{"t":"eq","v":"button","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":380,"y":1760,"wires":[["e56d565a.98d338","c0b16552.349f68"],["65849eb7.bcab"]]},{"id":"ebe4a531.edb198","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":920,"y":1620,"wires":[[]]},{"id":"d6f7220e.aaf41","type":"inject","z":"53889699.701908","name":"button","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"button\":{\"name\":\"predict path\",\"icon\":\"fa-star\",\"position\":\"bottomright\"}}}","payloadType":"json","x":370,"y":1300,"wires":[["808961ff.232e7"]]},{"id":"c0b16552.349f68","type":"change","z":"53889699.701908","name":"button","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"command\":{\"button\":{\"name\":\"predict path\",\"icon\":\"fa-calculator\",\"position\":\"bottomright\"}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":1260,"wires":[["808961ff.232e7"]]},{"id":"65849eb7.bcab","type":"link out","z":"53889699.701908","name":"local: button","links":["20e7d4a3.5c2d2c"],"x":525,"y":1780,"wires":[]},{"id":"20e7d4a3.5c2d2c","type":"link in","z":"53889699.701908","name":"","links":["65849eb7.bcab"],"x":695,"y":1760,"wires":[[]]},{"id":"a457938b.2aefb","type":"inject","z":"53889699.701908","name":"legend","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"command\":{\"legend\":\"<b>Next flyover</b></br><i style=\\\"background: #477AC2\\\"></i> Norby: -00:05:02<br><i style=\\\"background: #448D40\\\"></i> FEES: -00:33:42<br>\"}}","payloadType":"json","x":370,"y":1140,"wires":[["808961ff.232e7"]]},{"id":"ab8c6dff.94736","type":"function","z":"53889699.701908","name":"Legend - ETA","func":"\n\n// https://www.delftstack.com/de/howto/javascript/javascript-convert-timestamp-to-date/\n// https://coderrocketfuel.com/article/convert-milliseconds-to-a-date-in-vanilla-javascript\n// eta \n\n// \nfunction msToTime(s) {\n\n  // Pad to 2 or 3 digits, default is 2\n  function pad(n, z) {\n    z = z || 2;\n    return ('00' + n).slice(-z);\n  }\n\n  var ms = s % 1000;\n  s = (s - ms) / 1000;\n  var secs = s % 60;\n  s = (s - secs) / 60;\n  var mins = s % 60;\n  var hrs = (s - mins) / 60;\n\n  //return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n  // no ms \n  return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n}\n\n// get groundstation from global object\nvar gs = global.get('gs')\n\n// get TLE*s from global object\nvar gTLEs = global.get('TLEs')\n\n// get eta list from global object\n//var glist_eta = global.get('list_eta') || [];\n// start with empyt list\nvar glist_eta = [];\n\n//var timestamp = 1607110465663\n//now = new Date(points[i].timestamp);\nutcNow = Date.now();\n//now = Date();\n\n// loop through all TLE / Satlist ..................\n// -----------------------------------------------\n\n// interate through object .....\n// if object exist \nif (gTLEs){\n    let s;          // object name \n    let i = -1;     // unser define Index ( cause object List has no index )\n    \n    for (s in gTLEs) {\n\n        // load Object by name \n        var gSat  = gTLEs[s];\n        \n        var pname  = gSat.satid;\n        \n        // delta eta (countdown to contact -00:00:01)\n        var d_eta_utc = gSat.eta - utcNow;      // in millis !!\n        d_eta_utc = 8126345767890 - utcNow;\n        \n        // covert millis to human readable -h\n        let d_eta = msToTime(d_eta_utc)\n\n        let arr5 = \"<br>  <i style=\\\"background: #448D40\\\"></i> \\\n                \" +pname+ \":  T- \" +d_eta+ \" \"        \n        \n        // add / push entry to list ( max 8 entry ) \n        if (glist_eta.length < 8)\n        {\n            glist_eta.push(arr5);\n        }\n        else { break; }     // break if list full\n        \n        \n        \n    } // end for\n\n    \n    \n} // end if \n\n\n\n\n\nstr_arr5 = glist_eta.join(' ')\n\n//    for (var x = 0; x < (5); x++) {\n//        // concat arr5  to string  \n//        str_arr5 = str_arr5 + arr5[x];\n//    }\n\nvar mapLegend = {\n    command:{\n        legend: \"<b>Next flyover</b> \\\n                \" +str_arr5+ \" \\\n                <br> \\\n                \"\n        }\n}\n\n/*\n<br> <i style=\\\"background: #477AC2\\\"></i> \\\n                \" +pname+ \":  T- \" +d_eta+ \" \\\n                <br> <i style=\\\"background: #448D40\\\"></i> \\\n                \" +pname+ \":  T- \" +dateObject+ \" \\\n*/\n\n// set new eta_list to global object\nglobal.set('list_eta' , glist_eta)\n\n\n// push Legend to map\nmsg.payload = mapLegend;\nnode.send(msg);\n\n\n\n/*\n------------------------------------\n\n//var tempTime = moment.duration(d_eta);\n//var dateObject = d_eta.hours() + \":\" + d_eta.minutes();\n\n//var milliseconds = 1000;\n//moment.utc(milliseconds).format('HH:mm');\n\n// Math.trunc\n// level: (msg.payload[20].position.alt / 1000).toFixed(3).toString() + \" km \",\n\n\n// object\n{\n  \"name\": \"Flexible Experimental Embedded Satellite-0\",\n  \"timestamp\": 1619204201542,\n  \"position\": {\n    \"x\": 4863168.36639839,\n    \"y\": 2116263.7008535494,\n    \"z\": -4480738.832871702,\n    \"lat\": -40.3664641843842,\n    \"lon\": -112.6933102329231,\n    \"alt\": 573846.6987718521\n  },\n  \"velocity\": {\n    \"x\": 4926.299158348896,\n    \"y\": 722.1741646985236,\n    \"z\": 5697.355243624375\n  }\n}\n\n\n\nmsg.payload = {\n    \"name\": \"Myline\",\n    \"layer\": \"Lines\",\n    \"color\": \"#0000ff\",\n    \"weight\": \"6\",\n    \"dashArray\": \"30 20\",\n    \"geojson\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[0,0],[0,90]]\n    }\n}\n\n\nmsg.payload =  {\n    \"name\": \"circle\",\n    \"lat\": 51.515,\n    \"lon\": -0.1235,\n    \"radius\": 1000,\n    \"layer\": \"drawing\",\n    \"iconColor\": '#464646',\n    \"stroke\": false,\n    \"fillOpacity\": 0.8,\n    \"clickable\": true\n};\n*/\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":1400,"wires":[["808961ff.232e7","5c10e05d.83b85","4f3f2887.7fbed8"]]},{"id":"4f3f2887.7fbed8","type":"function","z":"53889699.701908","name":"Counter","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n\n// this.status({fill:\"red\",shape:\"ring\",text:\"counter: \"});\n//node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n//node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n//node.status({text:\"Just text status\"});\n//node.status({});   // to clear the status\n\n// save tcp reveive counter ...\n//context.global.tcp_rcv_cnt = count;\n\n// make it part of the outgoing msg object\n//msg.count = count;\n\n// show count\nnode.status({fill:\"blue\",shape:\"dot\",text:\"count: \" + count});\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":920,"y":1500,"wires":[[]]},{"id":"47e033d7.58fc1c","type":"function","z":"53889699.701908","name":"store tle into globals","func":"//get global object\nvar objStore = global.get('TLEs') || {};\n\nvar newS1; // objectname inside objStore\n\n// split payload ... for deap inspection ...\nvar newS2 = msg.satid.split(\" \");\nvar newS3 = msg.tle1.split(\" \");\nvar newS4 = msg.tle2.split(\" \");\n\n// Debug\n/*\nmsg.newS2_0 = newS2[0];   // \"Norby\"\nmsg.newS3_0 = newS3[0];   // \"1\"\nmsg.newS4_0 = newS4[0];   // \"2\"\n*/\n\n// check field.splits starting with valid char \nif  (   (newS2[0] !== \"1\" && newS2[0] !== \"2\") &&\n        (newS3[0]  == \"1\" && newS4[0]  == \"2\")\n    )\n    {\n        // original count function ....\n        var count = context.get('count')||0;\n        count += 1;\n        // store the value back\n        context.set('count',count);\n        \n        \n        //for (let i = 0; i < msg.payload.length; i++) {\n            newS1 = msg.satid;\n            \n    // obj exits >> update\n            if (objStore[newS1]) {\n                \n                //deny = objStore[newS1].deny || 0;\n                \n                objStore[newS1].satid = msg.satid;\n                objStore[newS1].tle1 =  msg.tle1;\n                objStore[newS1].tle2 =  msg.tle2;\n                \n            }\n            else{  // object new \n        \n    // create new object to store  \n            objStore[newS1] =\n                    {\n                    satid: msg.satid,\n                    tle1:  msg.tle1,\n                    tle2:  msg.tle2,\n                    eta:   \"\",\n                    alt:   0,\n                    satidAlias: \"\",     // shorter name \n                    d_eta_utc: 0,       // delta eta in millis\n                    d_eta:  \"\",         // -h delta eta T- 00:00:00 \n                    p_pass: \"\"\n                    }\n            }\n            \n        //}  // end for\n\n        //store global object\n        global.set('TLEs',objStore);\n        \n        // show status\n        node.status({fill:\"blue\",shape:\"dot\",text: msg.timestamp.ts + \" , count: \" + count});\n        \n} // end if valid\nelse\n{\n        // show status\n        node.status({fill:\"red\",shape:\"dot\",text: msg.timestamp.ts + \" , no valid data structure! \"});\n\n}\n\n\n//return msg;\n\n/*\n-------------------------------------------\nvar p = msg.payload;\nmsg.satid = p[0]\nmsg.tle1 =  p[1]\nmsg.tle2 =  p[2]\n\n\n\n\n*/\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":720,"y":1140,"wires":[[]]}]